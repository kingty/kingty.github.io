{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"8e0505ed14b2b6f468688721d7205bac5f6491ce","modified":1528352102026},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1528355665419},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1528355665419},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1528355665419},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1528355665422},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1528355665422},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1528355665422},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1528355665422},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1528355665422},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1528355665422},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1528355665422},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1528355665422},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1528355665422},{"_id":"themes/next/_config.yml","hash":"d4dcc2e1774571d9b603c5ad8cc3059384c3ebca","modified":1528355665422},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1528355665422},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1528355665422},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1528355665458},{"_id":"source/_posts/Centos-6-5-安装-tmux-最新版.md","hash":"11e2d0b18e4203323bc22a10ac53161c91dae6b0","modified":1528288998745},{"_id":"source/_posts/Hexo-Github-Blog-搭建.md","hash":"b036e71d19092ed25fd733b1000a4d979255dd44","modified":1528352461803},{"_id":"source/_posts/Retrofit-源码解析.md","hash":"314b1d2f446bdf0c732bad930d1cb749788de47a","modified":1528423953944},{"_id":"source/tags/index.md","hash":"5ea542fece12e1dcafdc3df611d3010e3815069a","modified":1528205918060},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"ccfe423c4f575a453a9a47784560b6a952fb2d53","modified":1528355797721},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528355665411},{"_id":"themes/next/.git/config","hash":"2816272f2e7d3b7fd38370fd077731ef27bdfa18","modified":1528355833747},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528355630710},{"_id":"themes/next/.git/index","hash":"e44998bc1a9a65f9e04981622404a2e3dccec91f","modified":1528355797715},{"_id":"themes/next/.git/packed-refs","hash":"17f326cbf3ea215479b7288b5bfafad35fa3f592","modified":1528355665402},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1528355665419},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1528355665419},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1528355665419},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1528355665419},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1528355665423},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1528355665423},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1528355665423},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1528355665423},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1528355665423},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1528355665423},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1528355665423},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1528355665423},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1528355665423},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1528355665423},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1528355665423},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1528355665423},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1528355665423},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1528355665423},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1528355665423},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1528355665423},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1528355665433},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1528355665458},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1528355665458},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1528355665458},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1528355665458},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1528355665458},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1528355665458},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1528355665458},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1528355665458},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1528355665458},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1528355665679},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1528355665679},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1528355665679},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665506},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1528355630710},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528355630710},{"_id":"themes/next/.git/hooks/post-commit.sample","hash":"856215503a9078b2689cb25c3c162de5d367a5ef","modified":1528355630710},{"_id":"themes/next/.git/hooks/post-receive.sample","hash":"ca25935f240323751eced8db52bc39a916ffb229","modified":1528355630710},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528355630710},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1528355630710},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"d0c6f52f0ba7230f21a3f0fe588097a3122a28fb","modified":1528355630710},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1528355630705},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1528355630710},{"_id":"themes/next/.git/hooks/update.sample","hash":"285293d900ea3cb448a33ebe3e6fc617ef78a45f","modified":1528355630710},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1528355630705},{"_id":"themes/next/.git/logs/HEAD","hash":"0bf8b6a9fa4ff6b29a0e64772d6bbe60305113be","modified":1528355797745},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528355665423},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1528355665433},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1528355665433},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1528355665433},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1528355665433},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1528355665433},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1528355665433},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1528355665433},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1528355665433},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1528355665433},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1528355665433},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1528355665434},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1528355665434},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1528355665434},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1528355665434},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1528355665434},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1528355665434},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1528355665443},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1528355665444},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1528355665444},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1528355665444},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1528355665444},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1528355665444},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1528355665444},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1528355665444},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1528355665459},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1528355665459},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1528355665459},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1528355665459},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1528355665459},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1528355665459},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1528355665459},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1528355665459},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1528355665459},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1528355665506},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528355665506},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528355665506},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528355665506},{"_id":"themes/next/source/images/avatar.jpg","hash":"c41dbd7de4fa6cf1e3f9ec66c4798d4ab8b04fd6","modified":1498476567000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528355665506},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528355665506},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528355665506},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528355665506},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528355665506},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528355665507},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528355665507},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528355665507},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528355665507},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528355665507},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528355665507},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528355665507},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528355665507},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528355665507},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528355665507},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665434},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665434},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665494},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665494},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665494},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665495},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528355665506},{"_id":"themes/next/.git/objects/42/f02d65a5709c840ad1c82c3efc6952593e7fd5","hash":"949689069f3034822f0e57fc791f289ae0544a27","modified":1528355797744},{"_id":"themes/next/.git/objects/66/7b1d018779c0da339dde816c1035814d2dfedf","hash":"2315c85bc6be34ac8beda0d0a29dfeaad09372bf","modified":1528355797745},{"_id":"themes/next/.git/objects/70/70129a970224a8bd0a75eaf99ad77d489655d6","hash":"ac121e8513e4d425e6863ca2eaf2f6cb47f8b823","modified":1528355797744},{"_id":"themes/next/.git/objects/82/b89d770ba2c95fc519be82969f853abfff75d1","hash":"8daa88a4c85f3b78187b17eb915b780be76711e9","modified":1528355797745},{"_id":"themes/next/.git/objects/ad/34eed8aa89a307d3ff78001bf2882d0ee461b9","hash":"ad3a3ca2fc83a1e1ff420d2acc806af6f5a43b87","modified":1528355783437},{"_id":"themes/next/.git/refs/heads/master","hash":"c2ba0d97b12d9b9e9243c251a9a7880e93084535","modified":1528355797745},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1528355665433},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1528355665434},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1528355665434},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1528355665434},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1528355665434},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1528355665434},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1528355665434},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1528355665434},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1528355665434},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1528355665434},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1528355665434},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1528355665434},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1528355665443},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1528355665443},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1528355665443},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1528355665443},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1528355665443},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1528355665444},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1528355665444},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1528355665444},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1528355665444},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1528355665444},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1528355665444},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1528355665444},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1528355665444},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1528355665444},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1528355665458},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1528355665483},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1528355665494},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1528355665494},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1528355665494},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1528355665495},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1528355665495},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1528355665495},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1528355665495},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528355665507},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528355665507},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1528355665507},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528355665507},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528355665507},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528355665507},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1528355665507},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1528355665518},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528355665518},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528355665518},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1528355665518},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528355665530},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528355665538},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1528355665538},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1528355665554},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1528355665555},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528355665555},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1528355665555},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1528355665563},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1528355665619},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1528355665632},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1528355665632},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1528355665632},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1528355665632},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528355665632},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528355665632},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1528355665633},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1528355665633},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528355665633},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528355665642},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528355665642},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528355665642},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528355665643},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528355665643},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528355665643},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1528355665666},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1528355665666},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528355665671},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528355665671},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528355665671},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528355665632},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0bf8b6a9fa4ff6b29a0e64772d6bbe60305113be","modified":1528355797745},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528355665410},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"c2ba0d97b12d9b9e9243c251a9a7880e93084535","modified":1528355833748},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1528355665444},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1528355665444},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1528355665459},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1528355665459},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1528355665459},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1528355665459},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1528355665459},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1528355665482},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1528355665483},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1528355665483},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1528355665495},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1528355665495},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528355665518},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528355665519},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528355665530},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528355665530},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528355665555},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528355665555},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528355665555},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528355665563},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528355665563},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528355665564},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528355665564},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528355665666},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528355665666},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528355665530},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528355665619},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528355665619},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528355665671},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"2823113523ad61ab0c15a6fd5d0ae35790792572","modified":1528355833753},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1528355665470},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1528355665471},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1528355665482},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1528355665483},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1528355665483},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528355665494},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1528355665495},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528355665518},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528355665519},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528355665519},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528355665519},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1528355665519},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528355665554},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528355665555},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528355665555},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528355665555},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528355665578},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528355665584},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528355665618},{"_id":"themes/next/.git/objects/pack/pack-0d1c7f3632b831beb623214d594c738475c94acf.idx","hash":"98cadc43ad4828b8ae1816810cb4283852682dd8","modified":1528355664880},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528355665538},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528355665665},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1528355665607},{"_id":"themes/next/.git/objects/pack/pack-0d1c7f3632b831beb623214d594c738475c94acf.pack","hash":"d451417de20c8928f8a4adf5217240ecd85de5c7","modified":1528355664853},{"_id":"public/tags/index.html","hash":"63b05bec8cfa770ad48d607ca24bb632515eab00","modified":1528423993099},{"_id":"public/archives/index.html","hash":"8fa67a5a3c1f297b7a5fe4c259b03919ccbca283","modified":1528423993099},{"_id":"public/archives/2018/index.html","hash":"62ae05a95fe779d7b6358a640192075076b9750e","modified":1528423993100},{"_id":"public/archives/2018/06/index.html","hash":"986386b17d28e9bf93e828486085c4675215892b","modified":1528423993100},{"_id":"public/tags/linux/index.html","hash":"62bbadfe2b7b72ef8bd5543309c01fd2ba614d34","modified":1528423993100},{"_id":"public/tags/其他/index.html","hash":"ffed339e388b483c0fac2850922bd4e80aaf9799","modified":1528423993100},{"_id":"public/tags/android/index.html","hash":"c451b74f9356a1077627462ce7593ee0a15b4d77","modified":1528423993101},{"_id":"public/2018/06/08/Retrofit-源码解析/index.html","hash":"637626c98d2acdddb51db8ef7faa4e4c701aa019","modified":1528423993101},{"_id":"public/2018/06/06/Centos-6-5-安装-tmux-最新版/index.html","hash":"9670e872cc424603ebeb04d6df9910c234eb6fa1","modified":1528423993102},{"_id":"public/2018/06/05/Hexo-Github-Blog-搭建/index.html","hash":"c2079d37e83d981b5c8dd4045dcb21b2bea038b0","modified":1528423993103},{"_id":"public/index.html","hash":"25d8f823015843023ef940d983da0efd4697323c","modified":1528423993103},{"_id":"public/CNAME","hash":"8e0505ed14b2b6f468688721d7205bac5f6491ce","modified":1528423993116},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1528423993116},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528423993116},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528423993117},{"_id":"public/images/avatar.jpg","hash":"c41dbd7de4fa6cf1e3f9ec66c4798d4ab8b04fd6","modified":1528423993117},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528423993118},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528423993118},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528423993118},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528423993118},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528423993118},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528423993118},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528423993118},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528423993119},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528423993119},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528423993119},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1528423993119},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528423993119},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528423993119},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528423993119},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528423993119},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528423993119},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1528423993120},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528423993120},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528423993120},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528423993120},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528423993120},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528423993120},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528423993120},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528423993121},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528423993121},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528423993121},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528423993121},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528423993121},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1528423993121},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528423993121},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528423993945},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528423993949},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528423993962},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528423993962},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1528423993963},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528423993963},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528423993963},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528423993963},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1528423993963},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528423993963},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528423993963},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528423993963},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528423993963},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1528423993964},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1528423993964},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1528423993964},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528423993964},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1528423993964},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1528423993964},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1528423993964},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528423993964},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1528423993964},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528423993964},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528423993964},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528423993965},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528423993965},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1528423993965},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1528423993966},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528423993966},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528423993966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528423993966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528423993966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528423993966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528423993966},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528423993966},{"_id":"public/css/main.css","hash":"8e3a759db635afa08abfdb7600757e1055fc92c7","modified":1528423993966},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528423993966},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528423993967},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528423993967},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1528423993976},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1528423993976},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528423993977},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528423993977},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528423993977},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528423993977},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528423993977},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528423993977},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1528423993985},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528423993985},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528423993994},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528423993994},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528423994003},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528423994004},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528423994004},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528423994005},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528423994005},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528423994005},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528423994005},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1528423994005},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1528423994013},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528423994014},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528423994014},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528423994024},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528423994041},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528423994055},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528423994075},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528423994130},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528423994145}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-06-05T12:19:11.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-05 20:19:11\ntype: \"tags\"\n---\n","updated":"2018-06-05T13:38:38.060Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji5c6jf90001oa50gvvkas4w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Centos 6.5 安装 tmux 最新版","date":"2018-06-06T12:32:15.000Z","_content":"\n## Contex\n- linux Centos6.5,64位\n- tmux 2.7\n\n<!--more-->\n\n## 流程\n\n### 下载安装libevent\n\n先安装libevent，在后面编译好tmux后会链接到这里来\n```\nwget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\n\ntar zxvf libevent-2.0.21-stable.tar.gz\n\ncd libevent-2.0.21-stable\n\n./configure\n\nmake && make install\n```\n\n### 安装tmux\n\n```\nwget https://github.com/tmux/tmux/releases/download/2.7/tmux-2.7.tar.gz\n\ntar zxvf tmux-2.7.tar.gz\n\ncd tmux-2.7\n\n./configure\n\nmake && make install\n```\n\n在执`./configure`的时候可能遇到的问题\n- configure: error: no acceptable C compiler found in $PATH\n解决的办法是:\n```\n yum install gcc\n```\n\n- configure: error: \"curses not found\"\n这个问题解决办法是：\n```\nyum install ncurses-devel\n```\n\n\n然后`make && make install` 完成之后输入`tmux`检验是否安装成功，这时候可能会出现异常\n```\ntmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory\n```\n\n解决办法是：\n```\nln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5`\n```\n\n\n在输入`tmux`应该就成功了。\n\n\n\n\n\n\n\n","source":"_posts/Centos-6-5-安装-tmux-最新版.md","raw":"---\ntitle: Centos 6.5 安装 tmux 最新版\ndate: 2018-06-06 20:32:15\ntags: linux\n---\n\n## Contex\n- linux Centos6.5,64位\n- tmux 2.7\n\n<!--more-->\n\n## 流程\n\n### 下载安装libevent\n\n先安装libevent，在后面编译好tmux后会链接到这里来\n```\nwget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\n\ntar zxvf libevent-2.0.21-stable.tar.gz\n\ncd libevent-2.0.21-stable\n\n./configure\n\nmake && make install\n```\n\n### 安装tmux\n\n```\nwget https://github.com/tmux/tmux/releases/download/2.7/tmux-2.7.tar.gz\n\ntar zxvf tmux-2.7.tar.gz\n\ncd tmux-2.7\n\n./configure\n\nmake && make install\n```\n\n在执`./configure`的时候可能遇到的问题\n- configure: error: no acceptable C compiler found in $PATH\n解决的办法是:\n```\n yum install gcc\n```\n\n- configure: error: \"curses not found\"\n这个问题解决办法是：\n```\nyum install ncurses-devel\n```\n\n\n然后`make && make install` 完成之后输入`tmux`检验是否安装成功，这时候可能会出现异常\n```\ntmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory\n```\n\n解决办法是：\n```\nln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5`\n```\n\n\n在输入`tmux`应该就成功了。\n\n\n\n\n\n\n\n","slug":"Centos-6-5-安装-tmux-最新版","published":1,"updated":"2018-06-06T12:43:18.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji5c6jf20000oa50nkmfkhrw","content":"<h2 id=\"Contex\"><a href=\"#Contex\" class=\"headerlink\" title=\"Contex\"></a>Contex</h2><ul>\n<li>linux Centos6.5,64位</li>\n<li>tmux 2.7</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"下载安装libevent\"><a href=\"#下载安装libevent\" class=\"headerlink\" title=\"下载安装libevent\"></a>下载安装libevent</h3><p>先安装libevent，在后面编译好tmux后会链接到这里来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd libevent-2.0.21-stable</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装tmux\"><a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/tmux/tmux/releases/download/2.7/tmux-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf tmux-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd tmux-2.7</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>在执<code>./configure</code>的时候可能遇到的问题</p>\n<ul>\n<li><p>configure: error: no acceptable C compiler found in $PATH<br>解决的办法是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>configure: error: “curses not found”<br>这个问题解决办法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ncurses-devel</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后<code>make &amp;&amp; make install</code> 完成之后输入<code>tmux</code>检验是否安装成功，这时候可能会出现异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>解决办法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5`</span><br></pre></td></tr></table></figure></p>\n<p>在输入<code>tmux</code>应该就成功了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Contex\"><a href=\"#Contex\" class=\"headerlink\" title=\"Contex\"></a>Contex</h2><ul>\n<li>linux Centos6.5,64位</li>\n<li>tmux 2.7</li>\n</ul>","more":"<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"下载安装libevent\"><a href=\"#下载安装libevent\" class=\"headerlink\" title=\"下载安装libevent\"></a>下载安装libevent</h3><p>先安装libevent，在后面编译好tmux后会链接到这里来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf libevent-2.0.21-stable.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd libevent-2.0.21-stable</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装tmux\"><a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/tmux/tmux/releases/download/2.7/tmux-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf tmux-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd tmux-2.7</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>在执<code>./configure</code>的时候可能遇到的问题</p>\n<ul>\n<li><p>configure: error: no acceptable C compiler found in $PATH<br>解决的办法是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>configure: error: “curses not found”<br>这个问题解决办法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ncurses-devel</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后<code>make &amp;&amp; make install</code> 完成之后输入<code>tmux</code>检验是否安装成功，这时候可能会出现异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>解决办法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5`</span><br></pre></td></tr></table></figure></p>\n<p>在输入<code>tmux</code>应该就成功了。</p>"},{"title":"Hexo&Github Blog 搭建","date":"2018-06-05T08:39:23.000Z","_content":"\n今天用`Github Pages` 和 `Hexo` 来搭建了一个静态的博客。好处就是不需要数据库也不需要服务器，完全交由`Github`托管就可以拥有自己的博客。下面我记录了一下我自己的搭建的过程。\n# Contex\n- linux Cenos 6.5,64位\n- Hexo 3.7.1\n\n<!--more-->\n# Github\n因为所有的内容都是`Github`托管的，所以你首先要有一个`Github`账号。然后在创建一个`Repository`,这个`Repository`必须要满足一个规则才能生成`Pages`.详细内容可以查阅官方文档 [Github Pages](https://pages.github.com/)\n\n简单来说就是创建一个名字为 `username.github.io`的库，其中`username`为你自己的`Github`的用户名。\n\n创建成功之后，把项目clone到本地。我机器本身还没有`Git`所以我先安装`Git`\n\n``` \nyum info git\nyum install -y git\n\n```\n\n然后我还需要添加这台机器对github的ssh权限，这样才能访问github。\n\n```\n#生成key\nssh-keygen -t rsa -C \"xxxx@gmail.com\"\n\ncd .ssh/\ncat id_rsa.pub \n# 得到这个key后把它添加进你的github key里面\n\n```\n完成之后我们把刚才创建的`Repository`拷贝到本地。\n\n```\ngit clone git@github.com:username/username.github.io.git\n\n```\n拷贝下来之后，我们在里面写一个我们的首页,并提交到我们的`Repository`\n\n```\ncd kingty.github.io\n\necho \"Hello World\" > index.html\n\ngit add --all\n\ngit commit -m \"Initial commit\"\n\ngit push -u origin master\n\n```\n\n到这里，你到浏览器输入`username.github.io`应该就可以访问到你刚才的html页面。其实到这里就相当于你的博客已经搭建完成了。但是，我们自己去写静态页面肯定是一个繁重的工作。因此我们就有了下面要介绍使用的工具`Hexo`\n\n# Hexo\n\n## 安装\n\n`Hexo`是一个快速、简洁且高效的博客框架。`Hexo` 使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且可以帮助我们直接部署到`github.io`也就是你上面创建的`Repository `上面ï¼这样我们就可以只需要写`Markdown`文件就完成了博客部署。\n\n`Hexo`是有`node` 构造所以我需要先在机器上安装`node`.\n\n```\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi\n\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi\n\nyum -y install nodejs npm --enablerepo=epel\n\n```\n\n安装好`node`之后我们就可以用`npm`安装`hexo`了\n\n```\nnpm install -g hexo\n\n```\n在安装`hexo`的时候可能会遇到问题：\n\n```\nnpm ERR! Error: CERT_UNTRUSTED\nnpm ERR!    at SecurePair.<anonymous> (tls.js:1430:32)\nnpm ERR!    at SecurePair.emit (events.js:92:17)\nnpm ERR!    at SecurePair.maybeInitFinished (tls.js:1029:10)\nnpm ERR!    at CleartextStream.read [as _read] (tls.js:521:13)\nnpm ERR!    at CleartextStream.Readable.read (_stream_readable.js:341:10)\nnpm ERR!    at EncryptedStream.write [as _write] (tls.js:418:25)\nnpm ERR!    at doWrite (_stream_writable.js:226:10)\nnpm ERR!    at writeOrBuffer (_stream_writable.js:216:5)\nnpm ERR!    at EncryptedStream.Writable.write (_stream_writable.js:183:11)\nnpm ERR!    at write (_stream_readable.js:602:24)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!    <http://github.com/isaacs/npm/issues>\nnpm ERR! or email it to:\nnpm ERR!    <npm-@googlegroups.com>\nnpm ERR! System Linux 2.6.32-696.18.7.el6.x86_64\nnpm ERR! command \"node\" \"/usr/bin/npm\" \"install\" \"-g\" \"hexo\"\nnpm ERR! cwd /root/github/kingty.github.io\nnpm ERR! node -v v0.10.48\nnpm ERR! npm -v 1.3.6\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!    /root/github/kingty.github.io/npm-debug.log\nnpm ERR! not ok code 0\n\n```\n这是因为npm用https导致的，解决办法是：\n\n```\nnpm config set strict-ssl false\n\n```\n\n然后应该就可以正常安装好了。完成之后我们需要初始化`Hexo`,**首先你还是要在刚才的`username.github.io`这个目录下，你现在应该在master分支，这时候你需要创建另外一个分支`hexo`**\n\n```\ngit checkout -b hexo\n\n```\n然后在这个分支上初始化\n\n```\nhexo init\n\n```\n\n初始化的过程可能你会遇到问题如下：\n\n```\n/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:13\nclass HexoNotFoundError extends Error {}\n^^^^^\nSyntaxError: Unexpected reserved word\n    at Module._compile (module.js:439:25)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at Object.<anonymous> (/usr/lib/node_modules/hexo/bin/hexo:5:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    \n```\n原因是`node`的版本过低，需要update 一下`node`到最新版\n\n```\n#安装更新的一个软件\nnpm install n -g\n\n#更新到最新stable版本\nn stable\n\n#重新初始化\nhexo init\n\n```\n这个时候你可能还ä¼遇到问题如下：\n\n```\nFATAL ~/github/kingty.github.io not empty, please run `hexo init` on an empty folder and then copy your files into it\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: target not empty\n    at Context.initConsole (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/console/init.js:30:27)\n    at Context.tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)\n    at Context.<anonymous> (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34)\n    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:44:9\n    at Promise._execute (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/debuggability.js:303:9)\n    at Promise._resolveFromExecutor (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:483:18)\n    at new Promise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:79:10)\n    at Context.call (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:40:10)\n    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:68:17\n    at tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)\n    at Promise._settlePromiseFromHandler (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:512:31)\n    at Promise._settlePromise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18)\n    at Promise._settlePromise0 (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18)\n    at Promise._fulfill (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18)\n    at Promise._resolveCallback (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:432:57)\n\n```\n\n这是因为`hexo`的初始化必须在一个空目录下，包括隐藏的目录。你的文件下应该会有一个`.git`å你刚刚创建的`index.html`，你需要暂时把他们移动到另外一个目录，初始化完成之后再移动回来。\n\n```\n#移动出去\nmv index.html ../temp\nmv .git ../temp\n\n#初始化\nhexo init\n\n```\n这时候应该可以初始化成功了，**然后用相同的方法移动回来，才能进行下一步**安装一下\n\n```\nnpm install\n\n```\n这个时候应该hexo就安装完成了。\n然后你可以把这些东西push到你的hexo分支上去。\n\n```\ngit add .\ngit commit -m \"xxx\"\ngit push -u origin hexo\n\n```\n\n## 配置\n\n安装完成后，我们需要配置一些我们要生成的信息，还有就是我们要部署的地址。在当前文件夹下，你会看到一个文件叫`_config.yml`\n\n```\nvi _config.yml\n\n```\n里面会有一些信息，例如title,author都修改成你自己的就好了。注意里面有一项是`deploy`,需要修改成你的repo地址和分支，表示生成生个之后会push到你的repo的master分支上\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:username/username.github.io.git\n  branch: master\n\n```\n\n其余的具体配置请参考[Hexo 配置](https://hexo.io/docs/configuration.html)\n\n## 文章\n\n配置完成后，我们尝试一下写一篇blog\n\n```\nhexo new \"test\"\n\n```\n这时候就会在 `source/_post`文件下生成一个 `test.md`的文件。\n\n```\ncd source/_post\n\nvim test.md\n\n\n```\n\n在里面写一点内容，然后生成。\n\n```\n\nhexo generate -d\n\n```\n\n这时候就会生成静态页面并自动push到你的master分支，在浏览器访问`username.github.io`就可以看到刚才生成的blog主页里会有这篇文章了。\n\n然后同样你可以把这些更改push到你的hexo分支上，以后别的电脑可以pull下来做更改。\n\n\n到这里，我们的博客就搭建好了，当然，你还可以为博客设置你喜欢的主题，做一些自己的定制等等。慢慢去摸索吧。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo-Github-Blog-搭建.md","raw":"---\ntitle: Hexo&Github Blog 搭建\ndate: 2018-06-05 16:39:23\ntags: 其他\n---\n\n今天用`Github Pages` 和 `Hexo` 来搭建了一个静态的博客。好处就是不需要数据库也不需要服务器，完全交由`Github`托管就可以拥有自己的博客。下面我记录了一下我自己的搭建的过程。\n# Contex\n- linux Cenos 6.5,64位\n- Hexo 3.7.1\n\n<!--more-->\n# Github\n因为所有的内容都是`Github`托管的，所以你首先要有一个`Github`账号。然后在创建一个`Repository`,这个`Repository`必须要满足一个规则才能生成`Pages`.详细内容可以查阅官方文档 [Github Pages](https://pages.github.com/)\n\n简单来说就是创建一个名字为 `username.github.io`的库，其中`username`为你自己的`Github`的用户名。\n\n创建成功之后，把项目clone到本地。我机器本身还没有`Git`所以我先安装`Git`\n\n``` \nyum info git\nyum install -y git\n\n```\n\n然后我还需要添加这台机器对github的ssh权限，这样才能访问github。\n\n```\n#生成key\nssh-keygen -t rsa -C \"xxxx@gmail.com\"\n\ncd .ssh/\ncat id_rsa.pub \n# 得到这个key后把它添加进你的github key里面\n\n```\n完成之后我们把刚才创建的`Repository`拷贝到本地。\n\n```\ngit clone git@github.com:username/username.github.io.git\n\n```\n拷贝下来之后，我们在里面写一个我们的首页,并提交到我们的`Repository`\n\n```\ncd kingty.github.io\n\necho \"Hello World\" > index.html\n\ngit add --all\n\ngit commit -m \"Initial commit\"\n\ngit push -u origin master\n\n```\n\n到这里，你到浏览器输入`username.github.io`应该就可以访问到你刚才的html页面。其实到这里就相当于你的博客已经搭建完成了。但是，我们自己去写静态页面肯定是一个繁重的工作。因此我们就有了下面要介绍使用的工具`Hexo`\n\n# Hexo\n\n## 安装\n\n`Hexo`是一个快速、简洁且高效的博客框架。`Hexo` 使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且可以帮助我们直接部署到`github.io`也就是你上面创建的`Repository `上面ï¼这样我们就可以只需要写`Markdown`文件就完成了博客部署。\n\n`Hexo`是有`node` 构造所以我需要先在机器上安装`node`.\n\n```\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi\n\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi\n\nyum -y install nodejs npm --enablerepo=epel\n\n```\n\n安装好`node`之后我们就可以用`npm`安装`hexo`了\n\n```\nnpm install -g hexo\n\n```\n在安装`hexo`的时候可能会遇到问题：\n\n```\nnpm ERR! Error: CERT_UNTRUSTED\nnpm ERR!    at SecurePair.<anonymous> (tls.js:1430:32)\nnpm ERR!    at SecurePair.emit (events.js:92:17)\nnpm ERR!    at SecurePair.maybeInitFinished (tls.js:1029:10)\nnpm ERR!    at CleartextStream.read [as _read] (tls.js:521:13)\nnpm ERR!    at CleartextStream.Readable.read (_stream_readable.js:341:10)\nnpm ERR!    at EncryptedStream.write [as _write] (tls.js:418:25)\nnpm ERR!    at doWrite (_stream_writable.js:226:10)\nnpm ERR!    at writeOrBuffer (_stream_writable.js:216:5)\nnpm ERR!    at EncryptedStream.Writable.write (_stream_writable.js:183:11)\nnpm ERR!    at write (_stream_readable.js:602:24)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!    <http://github.com/isaacs/npm/issues>\nnpm ERR! or email it to:\nnpm ERR!    <npm-@googlegroups.com>\nnpm ERR! System Linux 2.6.32-696.18.7.el6.x86_64\nnpm ERR! command \"node\" \"/usr/bin/npm\" \"install\" \"-g\" \"hexo\"\nnpm ERR! cwd /root/github/kingty.github.io\nnpm ERR! node -v v0.10.48\nnpm ERR! npm -v 1.3.6\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!    /root/github/kingty.github.io/npm-debug.log\nnpm ERR! not ok code 0\n\n```\n这是因为npm用https导致的，解决办法是：\n\n```\nnpm config set strict-ssl false\n\n```\n\n然后应该就可以正常安装好了。完成之后我们需要初始化`Hexo`,**首先你还是要在刚才的`username.github.io`这个目录下，你现在应该在master分支，这时候你需要创建另外一个分支`hexo`**\n\n```\ngit checkout -b hexo\n\n```\n然后在这个分支上初始化\n\n```\nhexo init\n\n```\n\n初始化的过程可能你会遇到问题如下：\n\n```\n/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:13\nclass HexoNotFoundError extends Error {}\n^^^^^\nSyntaxError: Unexpected reserved word\n    at Module._compile (module.js:439:25)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at Object.<anonymous> (/usr/lib/node_modules/hexo/bin/hexo:5:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    \n```\n原因是`node`的版本过低，需要update 一下`node`到最新版\n\n```\n#安装更新的一个软件\nnpm install n -g\n\n#更新到最新stable版本\nn stable\n\n#重新初始化\nhexo init\n\n```\n这个时候你可能还ä¼遇到问题如下：\n\n```\nFATAL ~/github/kingty.github.io not empty, please run `hexo init` on an empty folder and then copy your files into it\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: target not empty\n    at Context.initConsole (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/console/init.js:30:27)\n    at Context.tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)\n    at Context.<anonymous> (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34)\n    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:44:9\n    at Promise._execute (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/debuggability.js:303:9)\n    at Promise._resolveFromExecutor (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:483:18)\n    at new Promise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:79:10)\n    at Context.call (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:40:10)\n    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:68:17\n    at tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)\n    at Promise._settlePromiseFromHandler (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:512:31)\n    at Promise._settlePromise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18)\n    at Promise._settlePromise0 (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18)\n    at Promise._fulfill (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18)\n    at Promise._resolveCallback (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:432:57)\n\n```\n\n这是因为`hexo`的初始化必须在一个空目录下，包括隐藏的目录。你的文件下应该会有一个`.git`å你刚刚创建的`index.html`，你需要暂时把他们移动到另外一个目录，初始化完成之后再移动回来。\n\n```\n#移动出去\nmv index.html ../temp\nmv .git ../temp\n\n#初始化\nhexo init\n\n```\n这时候应该可以初始化成功了，**然后用相同的方法移动回来，才能进行下一步**安装一下\n\n```\nnpm install\n\n```\n这个时候应该hexo就安装完成了。\n然后你可以把这些东西push到你的hexo分支上去。\n\n```\ngit add .\ngit commit -m \"xxx\"\ngit push -u origin hexo\n\n```\n\n## 配置\n\n安装完成后，我们需要配置一些我们要生成的信息，还有就是我们要部署的地址。在当前文件夹下，你会看到一个文件叫`_config.yml`\n\n```\nvi _config.yml\n\n```\n里面会有一些信息，例如title,author都修改成你自己的就好了。注意里面有一项是`deploy`,需要修改成你的repo地址和分支，表示生成生个之后会push到你的repo的master分支上\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:username/username.github.io.git\n  branch: master\n\n```\n\n其余的具体配置请参考[Hexo 配置](https://hexo.io/docs/configuration.html)\n\n## 文章\n\n配置完成后，我们尝试一下写一篇blog\n\n```\nhexo new \"test\"\n\n```\n这时候就会在 `source/_post`文件下生成一个 `test.md`的文件。\n\n```\ncd source/_post\n\nvim test.md\n\n\n```\n\n在里面写一点内容，然后生成。\n\n```\n\nhexo generate -d\n\n```\n\n这时候就会生成静态页面并自动push到你的master分支，在浏览器访问`username.github.io`就可以看到刚才生成的blog主页里会有这篇文章了。\n\n然后同样你可以把这些更改push到你的hexo分支上，以后别的电脑可以pull下来做更改。\n\n\n到这里，我们的博客就搭建好了，当然，你还可以为博客设置你喜欢的主题，做一些自己的定制等等。慢慢去摸索吧。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Hexo-Github-Blog-搭建","published":1,"updated":"2018-06-07T06:21:01.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji5c6jhs0004oa501nwgmpmg","content":"<p>今天用<code>Github Pages</code> 和 <code>Hexo</code> 来搭建了一个静态的博客。好处就是不需要数据库也不需要服务器，完全交由<code>Github</code>托管就可以拥有自己的博客。下面我记录了一下我自己的搭建的过程。</p>\n<h1 id=\"Contex\"><a href=\"#Contex\" class=\"headerlink\" title=\"Contex\"></a>Contex</h1><ul>\n<li>linux Cenos 6.5,64位</li>\n<li>Hexo 3.7.1</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h1><p>因为所有的内容都是<code>Github</code>托管的，所以你首先要有一个<code>Github</code>账号。然后在创建一个<code>Repository</code>,这个<code>Repository</code>必须要满足一个规则才能生成<code>Pages</code>.详细内容可以查阅官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a></p>\n<p>简单来说就是创建一个名字为 <code>username.github.io</code>的库，其中<code>username</code>为你自己的<code>Github</code>的用户名。</p>\n<p>创建成功之后，把项目clone到本地。我机器本身还没有<code>Git</code>所以我先安装<code>Git</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info git</span><br><span class=\"line\">yum install -y git</span><br></pre></td></tr></table></figure>\n<p>然后我还需要添加这台机器对github的ssh权限，这样才能访问github。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#生成key</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@gmail.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd .ssh/</span><br><span class=\"line\">cat id_rsa.pub </span><br><span class=\"line\"># 得到这个key后把它添加进你的github key里面</span><br></pre></td></tr></table></figure>\n<p>完成之后我们把刚才创建的<code>Repository</code>拷贝到本地。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>\n<p>拷贝下来之后，我们在里面写一个我们的首页,并提交到我们的<code>Repository</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd kingty.github.io</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Hello World&quot; &gt; index.html</span><br><span class=\"line\"></span><br><span class=\"line\">git add --all</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>到这里，你到浏览器输入<code>username.github.io</code>应该就可以访问到你刚才的html页面。其实到这里就相当于你的博客已经搭建完成了。但是，我们自己去写静态页面肯定是一个繁重的工作。因此我们就有了下面要介绍使用的工具<code>Hexo</code></p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>Hexo</code>是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且可以帮助我们直接部署到<code>github.io</code>也就是你上面创建的<code>Repository</code>上面ï¼这样我们就可以只需要写<code>Markdown</code>文件就完成了博客部署。</p>\n<p><code>Hexo</code>是有<code>node</code> 构造所以我需要先在机器上安装<code>node</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<p>安装好<code>node</code>之后我们就可以用<code>npm</code>安装<code>hexo</code>了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>在安装<code>hexo</code>的时候可能会遇到问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Error: CERT_UNTRUSTED</span><br><span class=\"line\">npm ERR!    at SecurePair.&lt;anonymous&gt; (tls.js:1430:32)</span><br><span class=\"line\">npm ERR!    at SecurePair.emit (events.js:92:17)</span><br><span class=\"line\">npm ERR!    at SecurePair.maybeInitFinished (tls.js:1029:10)</span><br><span class=\"line\">npm ERR!    at CleartextStream.read [as _read] (tls.js:521:13)</span><br><span class=\"line\">npm ERR!    at CleartextStream.Readable.read (_stream_readable.js:341:10)</span><br><span class=\"line\">npm ERR!    at EncryptedStream.write [as _write] (tls.js:418:25)</span><br><span class=\"line\">npm ERR!    at doWrite (_stream_writable.js:226:10)</span><br><span class=\"line\">npm ERR!    at writeOrBuffer (_stream_writable.js:216:5)</span><br><span class=\"line\">npm ERR!    at EncryptedStream.Writable.write (_stream_writable.js:183:11)</span><br><span class=\"line\">npm ERR!    at write (_stream_readable.js:602:24)</span><br><span class=\"line\">npm ERR! If you need help, you may report this log at:</span><br><span class=\"line\">npm ERR!    &lt;http://github.com/isaacs/npm/issues&gt;</span><br><span class=\"line\">npm ERR! or email it to:</span><br><span class=\"line\">npm ERR!    &lt;npm-@googlegroups.com&gt;</span><br><span class=\"line\">npm ERR! System Linux 2.6.32-696.18.7.el6.x86_64</span><br><span class=\"line\">npm ERR! command &quot;node&quot; &quot;/usr/bin/npm&quot; &quot;install&quot; &quot;-g&quot; &quot;hexo&quot;</span><br><span class=\"line\">npm ERR! cwd /root/github/kingty.github.io</span><br><span class=\"line\">npm ERR! node -v v0.10.48</span><br><span class=\"line\">npm ERR! npm -v 1.3.6</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! Additional logging details can be found in:</span><br><span class=\"line\">npm ERR!    /root/github/kingty.github.io/npm-debug.log</span><br><span class=\"line\">npm ERR! not ok code 0</span><br></pre></td></tr></table></figure>\n<p>这是因为npm用https导致的，解决办法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set strict-ssl false</span><br></pre></td></tr></table></figure>\n<p>然后应该就可以正常安装好了。完成之后我们需要初始化<code>Hexo</code>,<strong>首先你还是要在刚才的<code>username.github.io</code>这个目录下，你现在应该在master分支，这时候你需要创建另外一个分支<code>hexo</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure>\n<p>然后在这个分支上初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>初始化的过程可能你会遇到问题如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:13</span><br><span class=\"line\">class HexoNotFoundError extends Error &#123;&#125;</span><br><span class=\"line\">^^^^^</span><br><span class=\"line\">SyntaxError: Unexpected reserved word</span><br><span class=\"line\">    at Module._compile (module.js:439:25)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class=\"line\">    at Module.load (module.js:356:32)</span><br><span class=\"line\">    at Function.Module._load (module.js:312:12)</span><br><span class=\"line\">    at Module.require (module.js:364:17)</span><br><span class=\"line\">    at require (module.js:380:17)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/usr/lib/node_modules/hexo/bin/hexo:5:1)</span><br><span class=\"line\">    at Module._compile (module.js:456:26)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class=\"line\">    at Module.load (module.js:356:32)</span><br></pre></td></tr></table></figure>\n<p>原因是<code>node</code>的版本过低，需要update 一下<code>node</code>到最新版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装更新的一个软件</span><br><span class=\"line\">npm install n -g</span><br><span class=\"line\"></span><br><span class=\"line\">#更新到最新stable版本</span><br><span class=\"line\">n stable</span><br><span class=\"line\"></span><br><span class=\"line\">#重新初始化</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>这个时候你可能还ä¼遇到问题如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ~/github/kingty.github.io not empty, please run `hexo init` on an empty folder and then copy your files into it</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Error: target not empty</span><br><span class=\"line\">    at Context.initConsole (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/console/init.js:30:27)</span><br><span class=\"line\">    at Context.tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">    at Context.&lt;anonymous&gt; (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class=\"line\">    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:44:9</span><br><span class=\"line\">    at Promise._execute (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/debuggability.js:303:9)</span><br><span class=\"line\">    at Promise._resolveFromExecutor (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:483:18)</span><br><span class=\"line\">    at new Promise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:79:10)</span><br><span class=\"line\">    at Context.call (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:40:10)</span><br><span class=\"line\">    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:68:17</span><br><span class=\"line\">    at tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">    at Promise._settlePromiseFromHandler (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:512:31)</span><br><span class=\"line\">    at Promise._settlePromise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18)</span><br><span class=\"line\">    at Promise._settlePromise0 (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10)</span><br><span class=\"line\">    at Promise._settlePromises (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18)</span><br><span class=\"line\">    at Promise._fulfill (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18)</span><br><span class=\"line\">    at Promise._resolveCallback (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:432:57)</span><br></pre></td></tr></table></figure>\n<p>这是因为<code>hexo</code>的初始化必须在一个空目录下，包括隐藏的目录。你的文件下应该会有一个<code>.git</code>å你刚刚创建的<code>index.html</code>，你需要暂时把他们移动到另外一个目录，初始化完成之后再移动回来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#移动出去</span><br><span class=\"line\">mv index.html ../temp</span><br><span class=\"line\">mv .git ../temp</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>这时候应该可以初始化成功了，<strong>然后用相同的方法移动回来，才能进行下一步</strong>安装一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>这个时候应该hexo就安装完成了。<br>然后你可以把这些东西push到你的hexo分支上去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push -u origin hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>安装完成后，我们需要配置一些我们要生成的信息，还有就是我们要部署的地址。在当前文件夹下，你会看到一个文件叫<code>_config.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi _config.yml</span><br></pre></td></tr></table></figure>\n<p>里面会有一些信息，例如title,author都修改成你自己的就好了。注意里面有一项是<code>deploy</code>,需要修改成你的repo地址和分支，表示生成生个之后会push到你的repo的master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:username/username.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其余的具体配置请参考<a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo 配置</a></p>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>配置完成后，我们尝试一下写一篇blog</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<p>这时候就会在 <code>source/_post</code>文件下生成一个 <code>test.md</code>的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd source/_post</span><br><span class=\"line\"></span><br><span class=\"line\">vim test.md</span><br></pre></td></tr></table></figure>\n<p>在里面写一点内容，然后生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo generate -d</span><br></pre></td></tr></table></figure>\n<p>这时候就会生成静态页面并自动push到你的master分支，在浏览器访问<code>username.github.io</code>就可以看到刚才生成的blog主页里会有这篇文章了。</p>\n<p>然后同样你可以把这些更改push到你的hexo分支上，以后别的电脑可以pull下来做更改。</p>\n<p>到这里，我们的博客就搭建好了，当然，你还可以为博客设置你喜欢的主题，做一些自己的定制等等。慢慢去摸索吧。</p>\n","site":{"data":{}},"excerpt":"<p>今天用<code>Github Pages</code> 和 <code>Hexo</code> 来搭建了一个静态的博客。好处就是不需要数据库也不需要服务器，完全交由<code>Github</code>托管就可以拥有自己的博客。下面我记录了一下我自己的搭建的过程。</p>\n<h1 id=\"Contex\"><a href=\"#Contex\" class=\"headerlink\" title=\"Contex\"></a>Contex</h1><ul>\n<li>linux Cenos 6.5,64位</li>\n<li>Hexo 3.7.1</li>\n</ul>","more":"<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h1><p>因为所有的内容都是<code>Github</code>托管的，所以你首先要有一个<code>Github</code>账号。然后在创建一个<code>Repository</code>,这个<code>Repository</code>必须要满足一个规则才能生成<code>Pages</code>.详细内容可以查阅官方文档 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a></p>\n<p>简单来说就是创建一个名字为 <code>username.github.io</code>的库，其中<code>username</code>为你自己的<code>Github</code>的用户名。</p>\n<p>创建成功之后，把项目clone到本地。我机器本身还没有<code>Git</code>所以我先安装<code>Git</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info git</span><br><span class=\"line\">yum install -y git</span><br></pre></td></tr></table></figure>\n<p>然后我还需要添加这台机器对github的ssh权限，这样才能访问github。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#生成key</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@gmail.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cd .ssh/</span><br><span class=\"line\">cat id_rsa.pub </span><br><span class=\"line\"># 得到这个key后把它添加进你的github key里面</span><br></pre></td></tr></table></figure>\n<p>完成之后我们把刚才创建的<code>Repository</code>拷贝到本地。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure>\n<p>拷贝下来之后，我们在里面写一个我们的首页,并提交到我们的<code>Repository</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd kingty.github.io</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Hello World&quot; &gt; index.html</span><br><span class=\"line\"></span><br><span class=\"line\">git add --all</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>到这里，你到浏览器输入<code>username.github.io</code>应该就可以访问到你刚才的html页面。其实到这里就相当于你的博客已经搭建完成了。但是，我们自己去写静态页面肯定是一个繁重的工作。因此我们就有了下面要介绍使用的工具<code>Hexo</code></p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>Hexo</code>是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且可以帮助我们直接部署到<code>github.io</code>也就是你上面创建的<code>Repository</code>上面ï¼这样我们就可以只需要写<code>Markdown</code>文件就完成了博客部署。</p>\n<p><code>Hexo</code>是有<code>node</code> 构造所以我需要先在机器上安装<code>node</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<p>安装好<code>node</code>之后我们就可以用<code>npm</code>安装<code>hexo</code>了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>在安装<code>hexo</code>的时候可能会遇到问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Error: CERT_UNTRUSTED</span><br><span class=\"line\">npm ERR!    at SecurePair.&lt;anonymous&gt; (tls.js:1430:32)</span><br><span class=\"line\">npm ERR!    at SecurePair.emit (events.js:92:17)</span><br><span class=\"line\">npm ERR!    at SecurePair.maybeInitFinished (tls.js:1029:10)</span><br><span class=\"line\">npm ERR!    at CleartextStream.read [as _read] (tls.js:521:13)</span><br><span class=\"line\">npm ERR!    at CleartextStream.Readable.read (_stream_readable.js:341:10)</span><br><span class=\"line\">npm ERR!    at EncryptedStream.write [as _write] (tls.js:418:25)</span><br><span class=\"line\">npm ERR!    at doWrite (_stream_writable.js:226:10)</span><br><span class=\"line\">npm ERR!    at writeOrBuffer (_stream_writable.js:216:5)</span><br><span class=\"line\">npm ERR!    at EncryptedStream.Writable.write (_stream_writable.js:183:11)</span><br><span class=\"line\">npm ERR!    at write (_stream_readable.js:602:24)</span><br><span class=\"line\">npm ERR! If you need help, you may report this log at:</span><br><span class=\"line\">npm ERR!    &lt;http://github.com/isaacs/npm/issues&gt;</span><br><span class=\"line\">npm ERR! or email it to:</span><br><span class=\"line\">npm ERR!    &lt;npm-@googlegroups.com&gt;</span><br><span class=\"line\">npm ERR! System Linux 2.6.32-696.18.7.el6.x86_64</span><br><span class=\"line\">npm ERR! command &quot;node&quot; &quot;/usr/bin/npm&quot; &quot;install&quot; &quot;-g&quot; &quot;hexo&quot;</span><br><span class=\"line\">npm ERR! cwd /root/github/kingty.github.io</span><br><span class=\"line\">npm ERR! node -v v0.10.48</span><br><span class=\"line\">npm ERR! npm -v 1.3.6</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! Additional logging details can be found in:</span><br><span class=\"line\">npm ERR!    /root/github/kingty.github.io/npm-debug.log</span><br><span class=\"line\">npm ERR! not ok code 0</span><br></pre></td></tr></table></figure>\n<p>这是因为npm用https导致的，解决办法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set strict-ssl false</span><br></pre></td></tr></table></figure>\n<p>然后应该就可以正常安装好了。完成之后我们需要初始化<code>Hexo</code>,<strong>首先你还是要在刚才的<code>username.github.io</code>这个目录下，你现在应该在master分支，这时候你需要创建另外一个分支<code>hexo</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure>\n<p>然后在这个分支上初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>初始化的过程可能你会遇到问题如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:13</span><br><span class=\"line\">class HexoNotFoundError extends Error &#123;&#125;</span><br><span class=\"line\">^^^^^</span><br><span class=\"line\">SyntaxError: Unexpected reserved word</span><br><span class=\"line\">    at Module._compile (module.js:439:25)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class=\"line\">    at Module.load (module.js:356:32)</span><br><span class=\"line\">    at Function.Module._load (module.js:312:12)</span><br><span class=\"line\">    at Module.require (module.js:364:17)</span><br><span class=\"line\">    at require (module.js:380:17)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/usr/lib/node_modules/hexo/bin/hexo:5:1)</span><br><span class=\"line\">    at Module._compile (module.js:456:26)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class=\"line\">    at Module.load (module.js:356:32)</span><br></pre></td></tr></table></figure>\n<p>原因是<code>node</code>的版本过低，需要update 一下<code>node</code>到最新版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装更新的一个软件</span><br><span class=\"line\">npm install n -g</span><br><span class=\"line\"></span><br><span class=\"line\">#更新到最新stable版本</span><br><span class=\"line\">n stable</span><br><span class=\"line\"></span><br><span class=\"line\">#重新初始化</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>这个时候你可能还ä¼遇到问题如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ~/github/kingty.github.io not empty, please run `hexo init` on an empty folder and then copy your files into it</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Error: target not empty</span><br><span class=\"line\">    at Context.initConsole (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/console/init.js:30:27)</span><br><span class=\"line\">    at Context.tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">    at Context.&lt;anonymous&gt; (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class=\"line\">    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:44:9</span><br><span class=\"line\">    at Promise._execute (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/debuggability.js:303:9)</span><br><span class=\"line\">    at Promise._resolveFromExecutor (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:483:18)</span><br><span class=\"line\">    at new Promise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:79:10)</span><br><span class=\"line\">    at Context.call (/usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/context.js:40:10)</span><br><span class=\"line\">    at /usr/lib/node_modules/hexo/node_modules/hexo-cli/lib/hexo.js:68:17</span><br><span class=\"line\">    at tryCatcher (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">    at Promise._settlePromiseFromHandler (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:512:31)</span><br><span class=\"line\">    at Promise._settlePromise (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18)</span><br><span class=\"line\">    at Promise._settlePromise0 (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10)</span><br><span class=\"line\">    at Promise._settlePromises (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18)</span><br><span class=\"line\">    at Promise._fulfill (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18)</span><br><span class=\"line\">    at Promise._resolveCallback (/usr/lib/node_modules/hexo/node_modules/bluebird/js/release/promise.js:432:57)</span><br></pre></td></tr></table></figure>\n<p>这是因为<code>hexo</code>的初始化必须在一个空目录下，包括隐藏的目录。你的文件下应该会有一个<code>.git</code>å你刚刚创建的<code>index.html</code>，你需要暂时把他们移动到另外一个目录，初始化完成之后再移动回来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#移动出去</span><br><span class=\"line\">mv index.html ../temp</span><br><span class=\"line\">mv .git ../temp</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<p>这时候应该可以初始化成功了，<strong>然后用相同的方法移动回来，才能进行下一步</strong>安装一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>这个时候应该hexo就安装完成了。<br>然后你可以把这些东西push到你的hexo分支上去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push -u origin hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>安装完成后，我们需要配置一些我们要生成的信息，还有就是我们要部署的地址。在当前文件夹下，你会看到一个文件叫<code>_config.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi _config.yml</span><br></pre></td></tr></table></figure>\n<p>里面会有一些信息，例如title,author都修改成你自己的就好了。注意里面有一项是<code>deploy</code>,需要修改成你的repo地址和分支，表示生成生个之后会push到你的repo的master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:username/username.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其余的具体配置请参考<a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo 配置</a></p>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>配置完成后，我们尝试一下写一篇blog</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<p>这时候就会在 <code>source/_post</code>文件下生成一个 <code>test.md</code>的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd source/_post</span><br><span class=\"line\"></span><br><span class=\"line\">vim test.md</span><br></pre></td></tr></table></figure>\n<p>在里面写一点内容，然后生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo generate -d</span><br></pre></td></tr></table></figure>\n<p>这时候就会生成静态页面并自动push到你的master分支，在浏览器访问<code>username.github.io</code>就可以看到刚才生成的blog主页里会有这篇文章了。</p>\n<p>然后同样你可以把这些更改push到你的hexo分支上，以后别的电脑可以pull下来做更改。</p>\n<p>到这里，我们的博客就搭建好了，当然，你还可以为博客设置你喜欢的主题，做一些自己的定制等等。慢慢去摸索吧。</p>"},{"title":"Retrofit 源码解析","date":"2018-06-08T02:11:19.000Z","_content":"\n\n## 简单用法\nRetrofit最简单的用法就是定义一个接口，创建`Retrofit`对象，调用`create()`方法得到一个`service`,\n然后自己根据`service`中的方法去做同步或者异步的请求，拿到数据对象，十分简单快速，简单代码如下：\n\n```java \npublic interface GitHub {\n   @GET(\"/repos/{owner}/{repo}/contributors\")\n   Call<List<Integer>> contributors(@Path(\"owner\") String owner,@Path(\"repo\") String repo);\n}\n\n.创建\nRetrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();\n.代理\nGitHub gitHub = retrofit.create(GitHub.class);\nCall<List<Integer>> call = gitHub.contributors(\"xx\", \"xx\");\n.执行\ncall.enqueue(new Callback<List<Integer>>() {\n    @Override\n    public void onResponse(Call<List<Integer>> call, Response<List<Integer>> response) {\n\n    }\n    @Override\n    public void onFailure(Call<List<Integer>> call, Throwable t) {\n\n    }\n});\n```\n## 流程分析\n\n### 创建\n\n那这么简单的过程，刚开始看的时候觉得有点懵é¼呀，怎么他就帮你完成了请求，你明明什么都没有做，下面我们按照它的流程慢慢来解析一下整个过程。\n我们要用`Retrofit`,首先自然是要创建它,也就是这行代码`Retrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();`.\n这里创建`Retrofit`是通过它的一个内部类`Builder`来创建的，也就是创建者模式，这个模式很简单，不知道的自行百度，谷歌。\n好，我们来看看这个`builder`做了什么,除了初始化有个`Platform.get()`,直接看最后的`build()`,其余的方法都是设置参数，主要就是这个`build()`：\n\n```java\npublic Builder() {\n      this(Platform.get());\n}\npublic Retrofit build() {\n  1.\n      if (baseUrl == null) {\n        throw new IllegalStateException(\"Base URL required.\");\n      }\n  2.\n      okhttp3.Call.Factory callFactory = this.callFactory;\n      if (callFactory == null) {\n        callFactory = new OkHttpClient();\n      }\n  3.\n      Executor callbackExecutor = this.callbackExecutor;\n      if (callbackExecutor == null) {\n        callbackExecutor = platform.defaultCallbackExecutor();\n      }\n  4.\n      // Make a defensive copy of the adapters and add the default Call adapter.\n      List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);\n      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));\n 5.\n      // Make a defensive copy of the converters.\n      List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);\n\n      return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,\n          callbackExecutor, validateEagerly);\n    } \n\n```\n首先一初始化，就做了一件事情，是啥`Platform.get()`，`Platform`是啥？直译过来就是平台啊，平台是啥？为啥要有平台？看下面这个代码`get()`其实\n就是一个就是调用`findPlatform()`：\n\n```java\nprivate static final Platform PLATFORM = findPlatform();\n\nstatic Platform get() {return PLATFORM;}\n\nprivate static Platform findPlatform() {\n    try {\n      Class.forName(\"android.os.Build\");\n      if (Build.VERSION.SDK_INT != 0) {\n        return new Android();\n      }\n    } catch (ClassNotFoundException ignored) {\n    }\n    try {\n      Class.forName(\"java.util.Optional\");\n      return new Java8();\n    } catch (ClassNotFoundException ignored) {\n    }\n    return new Platform();\n  \n  ```\n\n  有`Android`和`Java8`两种平台，`Android`我们还是能理解的，为啥还有个`Java8`，不要问我，我也不知道啊，`Retrofit`的作者炒鸡暖男，关心全世界各种码农，\n  我是个写android代码的我们就看`Android`平台就好了\n  下面我们来看一下`build()`这个方法：\n- 第一步很简单，没有`baseUrl`抛出异常，最基本的没有，事情没法干是吧。\n- 第二步，如果没有给他设置`callFactory`，那默认给他一个`callFactory`，默认就是新创建一个`OkHttpClient`，这里可能我们会有自己做过一些\n处理的`OkHttpClient`,比如加了`Interceptor`啊之类的，设置进来就好了，就不会用默认的。\n有人可能会问啥是`callFactory`啊 ？`callFactory`嘛，就是call的factory嘛，call是啥，就是请求，factory是啥，就是工厂，`callFactory`就是创建请求的\n工厂，`OkHttpClient`就是一个很牛逼的创建请求的工厂，不在本文讨论范围内，就不多言了。\n- 第三步，设置`callbackExecutor`,又来一个，这`callbackExecutor`又是啥呢？`callback`就是回调嘛，啥回调，就是网络请求返回回来数据的回调，`executor`呢，就是执行者\n，合起来就是回调的执行者，意思网络成功了之后交给他它了。如果你没有设置它就自己整一个默认的回调嘛，不能没有。但是这里它要搞事情了，它返回了一个啥？\n`platform.defaultCallbackExecutor();`来，我们看一下`android`下它返回的是啥：\n```java\nstatic class Android extends Platform {\n    @Override public Executor defaultCallbackExecutor() {\n      return new MainThreadExecutor();\n    }\n\n    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {\n      return new ExecutorCallAdapterFactory(callbackExecutor);\n    }\n\n    static class MainThreadExecutor implements Executor {\n      private final Handler handler = new Handler(Looper.getMainLooper());\n\n      @Override public void execute(Runnable r) {\n        handler.post(r);\n      }\n    }\n  }\n```\n是啥？`MainThreadExecutor()`啊，啥意思就是主线程啊，下面写的明明白白的`Looper.getMainLooper()`再把要执行的`Runnable`post到主线程上执行\n因为它是默认的嘛，可能就说大多数人都是得到数据更新UI啊啥的，所以就默认在主线程上执行回调了。我就不想拿到数据在主线程座做咋办，我拿到数据我就想更新数据库，\n我想在IO线程上搞事情，那就自己写个`callbackExecutor`，自己在IO线程上做就好了，人家提供了一个方法`callbackExecutor(Executor executor)`给你，你自己设置进去就好了\n\n- 第四步是啥？看代码说话，那就是设置`callAdapterFactory`啊 。`callAdapterFactory`又是什么鬼啊，和上面一样啊，拆分一下呀。`CallAdapter`啥意思，就是请求的\n适配器，请求的适配器是什么鬼啊。来来来我告诉你，你看看源码里面根目录是不是有一个包名字叫做`'retrofit-adapter'`,这个包就是实现了一些列的`CallAdapter`\n意思就是你想将返回的数据用什么东西包装起来，比如你用`Rxjava`的话想返回`Observable`，或者高兴，想用`Java8`的`CompletableFuture`，这些都由你呀。\n但是这些都实现了一个叫`CallAdapter`的接口。我们来简单看看这个接口：\n```java\npublic interface CallAdapter<R, T> {\n  Type responseType();\n  T adapt(Call<R> call);\n  abstract class Factory {\n    public abstract CallAdapter<?, ?> get(Type returnType, Annotation[] annotations,\n        Retrofit retrofit);\n    protected static Type getParameterUpperBound(int index, ParameterizedType type) {\n      return Utils.getParameterUpperBound(index, type);\n    }\n    protected static Class<?> getRawType(Type type) {\n      return Utils.getRawType(type);\n    }\n  }\n}\n```\n其实接口里面就是两个方法还有一个静态的工厂类。`responseType()`这个方法决定请求回来之后返回的是什么类型的数据。比如在示例用法中我们的`List<Integer>`\n`adapt()`这个方法是干嘛的呢？就是适配嘛，就是怎样把返回回来的数据通过这个方法包装成你想要的对象。\n这里看到这个名字`adapter`你想到了啥，其实就是传说中的适配器模式啊，就是我给你定义一个接口放这里，我在框架里的逻辑就用这个接口来做就好了，至于你想要怎样的实现，\n想用框架供给你的一些实现比如`Rxjava`或者`Java8`的`CallAdapter`,或者是你自己心情好想用自己的实现一个其他的`CallAdapter`，你自己决定就好了。这就是传说中的啥？？扩展性好啊。\n继续看`build()`\n这个方法，它调用的是`adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));·\n再回来`Platform`看`defaultCallAdapterFactory()`返回的是一个`ExecutorCallAdapterFactory`。这个类他么的又来干嘛，当然是搞事情。\n进去瞅一眼，发现了什么？它当然是继承`CallAdapter.Factory`了，这个不说了，看几句代码来，看它的`get()`方法，看看这个工厂是怎么造`CallAdapter`的：\n```java\n  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {\n    if (getRawType(returnType) != Call.class) {\n      return null;\n    }\n    final Type responseType = Utils.getCallResponseType(returnType);\n    return new CallAdapter<Object, Call<?>>() {\n      @Override public Type responseType() {\n        return responseType;\n      }\n\n      @Override public Call<Object> adapt(Call<Object> call) {\n        return new ExecutorCallbackCall<>(callbackExecutor, call);\n      }\n    };\n  }\n  ```\n  返回了一个简单新创建的实现`CallAdapter`ç匿名类。注意看看这里的`adapt()`方法，前面讲了就是用它来实现到底返回什么包装对象的逻辑。这里返回的是一个\n  `ExecutorCallbackCall`,`ExecutorCallbackCall`是这`ExecutorCallAdapterFactory`里面的一个内部类.来看看它的代码：\n\n  ```java\n  static final class ExecutorCallbackCall<T> implements Call<T> {\n    final Executor callbackExecutor;\n    final Call<T> delegate;\n\n    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {\n      this.callbackExecutor = callbackExecutor;\n      this.delegate = delegate;\n    }\n\n    @Override public void enqueue(final Callback<T> callback) {\n      if (callback == null) throw new NullPointerException(\"callback == null\");\n\n      delegate.enqueue(new Callback<T>() {\n        @Override public void onResponse(Call<T> call, final Response<T> response) {\n          callbackExecutor.execute(new Runnable() {\n            @Override public void run() {\n              if (delegate.isCanceled()) {\n                // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.\n                callback.onFailure(ExecutorCallbackCall.this, new IOException(\"Canceled\"));\n              } else {\n                callback.onResponse(ExecutorCallbackCall.this, response);\n              }\n            }\n          });\n        }\n\n        @Override public void onFailure(Call<T> call, final Throwable t) {\n          callbackExecutor.execute(new Runnable() {\n            @Override public void run() {\n              callback.onFailure(ExecutorCallbackCall.this, t);\n            }\n          });\n        }\n      });\n    }\n\n    @Override public boolean isExecuted() {\n      return delegate.isExecuted();\n    }\n\n    @Override public Response<T> execute() throws IOException {\n      return delegate.execute();\n    }\n\n    @Override public void cancel() {\n      delegate.cancel();\n    }\n\n    @Override public boolean isCanceled() {\n      return delegate.isCanceled();\n    }\n\n    @SuppressWarnings(\"CloneDoesntCallSuperClone\") // Performing deep clone.\n    @Override public Call<T> clone() {\n      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());\n    }\n\n    @Override public Request request() {\n      return delegate.request();\n    }\n  }\n  ```\n  它实现了`Call`这个接口，`Call`我们前面说了，是啥，就是一个请求嘛，然而我们看这里并没有实际做请求而是用了一个静态代理，\n  通过代理类的实现来实现call请求，而在这里面做了一些其他的逻辑比如`cancel`的逻辑，而实际上做请求的还是交个了`delegate -> OkHttpCall`.\n\n- 第五步，接着看上面的`build()`的代码，不要着急，第一段代码还没讲完呢。第五步是什么？`List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);`\n这一步就是关于`Converter`，顾名思义，它就是一个转换器，什么转换器，数据的转换器，我们从后端获取到的数据，一般都是一些序列化的数据，例如`json`,`xml`,`protobuf`之类的\n而æ们前端用到的需要的是一个对象，我们就需要吧这些序列化的数据转换成我们想要的能直接用的用起来爽的对象，这时候就需要现在登场的这个东西。现在`json`用的\n比较多，我们平时都会用什么`gson`,`jackson`或者其他的三方库来转化它，你觉得哪个用起来高兴就可以用什么写一个`Converter`,然后用`Builder`中的`addConverterFactory`\n就可以用你想要的了，而且你都不用写，因为官方提供了好多种`Converter`的，在根目录下的`'retrofit-converters'`这个包下面，你只需要用就好了，那我们这里如果没有设置过`converterFactories`\n咋办？咋办？没设置，后面找不到会**报错的**。\n这里的`Response`是`Retrofit`对`OkHttp`的`ResponseBody`封装了一些逻辑的类，源码就不贴了，自己点进去看看。\n这里我们顺便看看`Converter`这个接口：\n```java\npublic interface Converter<F, T> {\n  T convert(F value) throws IOException;\n  abstract class Factory {\n    \n    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,\n        Retrofit retrofit) {\n      return null;\n    }\n    public Converter<?, RequestBody> requestBodyConverter(Type type,\n        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n      return null;\n    }\n    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,\n        Retrofit retrofit) {\n      return null;\n    }\n  }\n}\n```\n接口就一个方法，就是转换，然后里面还有一个静态的工厂类我们看到里面有3个方法，其实很好理解。我们需要把返回来的`ResponseBody`里的数据转换\n成我们想要的东西，我们也会想要把我们`RequestBody`程序里的东西转换成后端想要的东西.就是这个逻辑拉，这个工厂类就是给我们提供各种转换器，我们\n只需要根据我们自己的需求来实现或者使用对应的就好了。这又是啥，还是和上面一样啊ï¼给你定义一个接口，接口是什么，就是标准，给你一个标准\n你实现这个标准就行，我用我这套标准来实现我内部的逻辑，至于你怎么实现，想用啥方法实现，玩成什么花样都可以，我不管，只要你遵循了标准，就可以。这样\n扩展性就好呀。这就是人家大神牛逼之处啊，代码写到高处就是写标准啊。\n讲到这里，我们示例用法中的第一句`Retrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();`总算讲完了。中间这么多逻辑，这么\n多心血，你看，你一句话就搞定了，是不是该学习学习。\n\n### 代理\n\nbuild好了之后，就是需要的材料都搞齐了，要工厂有工厂要材料有材料，下面我们来讲讲这第二句，第二句，那厉害了。其实他就是啥，利用你定义的一个充满各种注解的接口`interface GitHub()`来简单粗暴的做了一个动作，\n那就是`create()`。这个动作看似简单，实则过于粗暴啊，进去ç看代码\n\n```java\npublic <T> T create(final Class<T> service) {\n  1.\n    Utils.validateServiceInterface(service);\n  2.\n    if (validateEagerly) {\n      eagerlyValidateMethods(service);\n    }\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\n        new InvocationHandler() {\n          private final Platform platform = Platform.get();\n\n          @Override public Object invoke(Object proxy, Method method, Object... args)\n              throws Throwable {\n            3.\n            // If the method is a method from Object then defer to normal invocation.\n            if (method.getDeclaringClass() == Object.class) {\n              return method.invoke(this, args);\n            }\n            if (platform.isDefaultMethod(method)) {\n              return platform.invokeDefaultMethod(method, service, proxy, args);\n            }\n            4.\n            ServiceMethod<Object, Object> serviceMethod =\n                (ServiceMethod<Object, Object>) loadServiceMethod(method);\n            5.\n            OkHttpCall<Object> okHttpCall = new OkHttpCall<>(serviceMethod, args);\n            6.\n            return serviceMethod.callAdapter.adapt(okHttpCall);\n          }\n        });\n  }\n```\n这里你首先要了解的知识是泛型，反射，动态代理。如果不懂，请自行google.好吧，我说下动态代理，动态代理就是动态的代理，就是只要你实现了一个借口，`Proxy`就可以根据这个接口来对你\n实现代理，也就是说`Proxy`只能代理实现了接口的类。这也就是为什么我们要写一个`Interface`来作为`Service`,然后在里面写一些注解之类的。如果接触过`JAVAEE`的话，\n`Spring`里的AOP动态代理是采用`cglib`来修改字节码实现的动态代理，而且不需要实现接口，感兴趣的朋友可以看一下。回到这里，就是通过`Proxy`这个类利用反射，对你写的接口进行解析\n获取到你申明的方法，然后对你的方法实现框架想要实现的逻辑，来完成所谓的ä»£理。\n我们来看代码。\n\n- 第一步，就是检验你定义的`service`接口是不是正确。简单看下代码,首先如果不是接口会抛出异常，还有为了避免出现bug,和保证API都是统一的标准，不允许定义的`Service`接口继承别的接口\n```java\nstatic <T> void validateServiceInterface(Class<T> service) {\n    if (!service.isInterface()) {\n      throw new IllegalArgumentException(\"API declarations must be interfaces.\");\n    }\n    // Prevent API interfaces from extending other interfaces. This not only avoids a bug in\n    // Android (http://b.android.com/58753) but it forces composition of API declarations which is\n    // the recommended pattern.\n    if (service.getInterfaces().length > 0) {\n      throw new IllegalArgumentException(\"API interfaces must not extend other interfaces.\");\n    }\n  }\n  ```\n- 第二步，如果你在前面`creat()`的时候，设置过`validateEagerly`为`true`的话，它会在这一步将所有的你`Service`中声明的`Method`在这里都å始化了,并且缓存起来\n```java\nprivate void eagerlyValidateMethods(Class<?> service) {\n    Platform platform = Platform.get();\n    for (Method method : service.getDeclaredMethods()) {\n      if (!platform.isDefaultMethod(method)) {\n        loadServiceMethod(method);\n      }\n    }\n  }\n\n  ServiceMethod<?, ?> loadServiceMethod(Method method) {\n    ServiceMethod<?, ?> result = serviceMethodCache.get(method);\n    if (result != null) return result;\n\n    synchronized (serviceMethodCache) {\n      result = serviceMethodCache.get(method);\n      if (result == null) {\n        result = new ServiceMethod.Builder<>(this, method).build();\n        serviceMethodCache.put(method, result);\n      }\n    }\n    return result;\n  }\n  ```\n  这里在解析你用`annotations`标注的`Method`时也一样用到了`Builder`这种模式，通过`ServiceMethod`这个类来解析你的标注，将标准转化为实际的逻辑。\n  这里面的代码比较多，我就不再贴了，其实里面的逻辑比较单一，但是比较复杂。主要就是根据不同的标注，来生成对应的对象，你用着有多简单就有框架来给你承受多复杂。只看一下他的`Constructor`\n  最后会得到着一些东西。\n  ```java\n    ServiceMethod(Builder<R, T> builder) {\n      this.callFactory = builder.retrofit.callFactory();\n      this.callAdapter = builder.callAdapter;\n      this.baseUrl = builder.retrofit.baseUrl();\n      this.responseConverter = builder.responseConverter;\n      this.httpMethod = builder.httpMethod;\n      this.relativeUrl = builder.relativeUrl;\n      this.headers = builder.headers;\n      this.contentType = builder.contentType;\n      this.hasBody = builder.hasBody;\n      this.isFormEncoded = builder.isFormEncoded;\n      this.isMultipart = builder.isMultipart;\n      this.parameterHandlers = builder.parameterHandlers\n    }\n  ```\n\n- 第三步，这时候就进入到每个方法的代理实现里来了。实际上这里面是已经进入了上面例子中的第三句了，因为是为每一个其中的方法实ç°代理`Call<List<Integer>> call = gitHub.contributors(\"xx\", \"xx\");`的流程了。\n如果是`Object`声明的方法，直接执行原方法，然后`platform.isDefaultMethod(method)`在`Android`平台直接返回`false`，所以这里直接忽略。\n- 第四步，这里如果第二步没有build过这个方法，或者缓存里没有会`build`这个方法，缓存里有的话直接取过来。\n- 第五步，根据`serviceMethod`初始化`OkHttpCall`,真正执行请求是交给这个类来执行的。\n- 第六步，根据`OkHttpCall`最后返回`CallAdapter`适配后的你想要的类型.到这里就通过代理得到了一个所有参数，`headers`或者其他都准备好了的，并且也通过`CallAdapter`实现了返回数据包装的一个完整的数据类型.\n\n讲到这里，准备工作都已经做齐了，就等着最后执行了。这里的`Call`是根据你设置的`CallAdapter`来返回的，比如如果你熟悉`Rxjava`，那结合`Rxjava`，这里也可以\n返回一个`Observable`.当然你å¨定义这个`Service`接口的时候也应该声明为这个返回类型。就算是`Call` ,也不是返回`OkHttpCall`,前面讲到了`ExecutorCallbackCall`来静态代理了\n`OkHttpCall`，实际上这里返回的是`ExecutorCallbackCall`.\n\n### 执行\n\n如果是`ExecutorCallbackCall`的话，提供了同步的`excute`和异步的`enqueue`来执行这个请求，并且提供一个`Callback`回调的接口来处理调用成功\n或者失败。调用之后是如何拿到数据之后，被`Converter`转化，被`CallAdapter`包装然后返回给我们的呢？\n来我们慢慢分析。前面我们提到了，其实所有的请求执行，实际上都是`OkHttpCall`这个类在操作。`OkHttpCall`实现了`Call`接口，就是一些请求的常用逻辑，同步异步cancel等等，\n不管是同步还是异步，最后都是拿到返回的`Response`转换成我们想要的数据。我们挑一个`OkHttpCall`中同步的方法看看：\n\n```java \n  @Override \n  public Response<T> execute() throws IOException {\n      okhttp3.Call call;\n\n      synchronized (this) {\n        ... 中间逻辑很简单就省略了\n\n      return parseResponse(call.execute());\n     }\n  }\n\n\n Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {\n    ResponseBody rawBody = rawResponse.body();\n    rawResponse = rawResponse.newBuilder()\n        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))\n        .build();\n\n    int code = rawResponse.code();\n    if (code < 200 || code >= 300) {\n      try {\n        // Buffer the entire body to avoid future I/O.\n        ResponseBody bufferedBody = Utils.buffer(rawBody);\n        return Response.error(bufferedBody, rawResponse);\n      } finally {\n        rawBody.close();\n      }\n    }\n\n    if (code == 204 || code == 205) {\n      rawBody.close();\n      return Response.success(null, rawResponse);\n    }\n\n    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);\n    try {\n      T body = serviceMethod.toResponse(catchingBody);\n      return Response.success(body, rawResponse);\n    } catch (RuntimeException e) {\n      // If the underlying source threw an exception, propagate that rather than indicating it was\n      // a runtime exception.\n      catchingBody.throwIfCaught();\n      throw e;\n    }\n  }\n  ```\n首先我们就来看`Retrofit`在执行后是怎么讲`response`转换成我们想要的数据的。`excute()`执行后中间有点失败取消的逻辑，最后就是直接把成功后的`response`交给\n`parseResponse()`这个方法，这里先转化为一个没有`body`数据的`response`来做状态判断，如果需要转换数据，把原来的`ResponseBody`转换为一个静态代理的`ExceptionCatchingRequestBody`\n交给`serviceMethod.toResponse(catchingBody)`，主要是为了做一些异常处理。顺着这个流程我们进`ServiceMethod`来看看`toResponse（）`这个方法。\n```\n/** Builds a method return value from an HTTP response body. */\n public ServiceMethod build() {\n   ...\n    responseConverter = createResponseConverter();\n    ...\n }\n\n  R toResponse(ResponseBody body) throws IOException {\n    return responseConverter.convert(body);\n  }\n\n \n\nprivate Converter<ResponseBody, T> createResponseConverter() {\n      Annotation[] annotations = method.getAnnotations();\n      try {\n        return retrofit.responseBodyConverter(responseType, annotations);\n      } catch (RuntimeException e) { // Wide exception range because factories are user code.\n        throw methodError(e, \"Unable to create converter for %s\", responseType);\n      }\n    }\n ```\n\n很简单就是交给了`Converter`来做转换。`Converter`看起来是不是很眼熟。前面我们好像设置了啊。最后又回到了`Retrofit`这个类，来看看\n`responseBodyConverter（）`这个方法：\n```java\n  public <T> Converter<T, RequestBody> requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {\n    return nextRequestBodyConverter(null, type, parameterAnnotations, methodAnnotations);\n  }\n\n  public <T> Converter<T, RequestBody> nextRequestBodyConverter(Converter.Factory skipPast,\n      Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {\n    checkNotNull(type, \"type == null\");\n    checkNotNull(parameterAnnotations, \"parameterAnnotations == null\");\n    checkNotNull(methodAnnotations, \"methodAnnotations == null\");\n\n    int start = converterFactories.indexOf(skipPast) + 1;\n    for (int i = start, count = converterFactories.size(); i < count; i++) {\n      Converter.Factory factory = converterFactories.get(i);\n      Converter<?, RequestBody> converter =\n          factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);\n      if (converter != null) {\n        //noinspection unchecked\n        return (Converter<T, RequestBody>) converter;\n      }\n    }\n\n   ...build string\n    throw new IllegalArgumentException(builder.toString());\n  }\n  ```\n  其实很简单，就是返回`factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);`，就是å·¥厂造一个`Converter`\n  这个工厂造的`Converter`怎么造，框架是不管的，总之你按照我给你定义的标准造一个来就是了。感兴趣就去看看`'retrofit-converters'`这个包里是怎么造的，也很简单\n  然后通过`Converter`的`convert()`方法就把你想要的类型数据返回给你了，这个`convert()`方法也是你在实现`Converter`要自己实现的，当然源码里提供了一些实现，你自己去看。\n\n\n  \n  整个流程就是这样的。希望对你阅读源代码有帮助。\n","source":"_posts/Retrofit-源码解析.md","raw":"---\ntitle: Retrofit 源码解析\ndate: 2018-06-08 10:11:19\ntags: android\n---\n\n\n## 简单用法\nRetrofit最简单的用法就是定义一个接口，创建`Retrofit`对象，调用`create()`方法得到一个`service`,\n然后自己根据`service`中的方法去做同步或者异步的请求，拿到数据对象，十分简单快速，简单代码如下：\n\n```java \npublic interface GitHub {\n   @GET(\"/repos/{owner}/{repo}/contributors\")\n   Call<List<Integer>> contributors(@Path(\"owner\") String owner,@Path(\"repo\") String repo);\n}\n\n.创建\nRetrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();\n.代理\nGitHub gitHub = retrofit.create(GitHub.class);\nCall<List<Integer>> call = gitHub.contributors(\"xx\", \"xx\");\n.执行\ncall.enqueue(new Callback<List<Integer>>() {\n    @Override\n    public void onResponse(Call<List<Integer>> call, Response<List<Integer>> response) {\n\n    }\n    @Override\n    public void onFailure(Call<List<Integer>> call, Throwable t) {\n\n    }\n});\n```\n## 流程分析\n\n### 创建\n\n那这么简单的过程，刚开始看的时候觉得有点懵é¼呀，怎么他就帮你完成了请求，你明明什么都没有做，下面我们按照它的流程慢慢来解析一下整个过程。\n我们要用`Retrofit`,首先自然是要创建它,也就是这行代码`Retrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();`.\n这里创建`Retrofit`是通过它的一个内部类`Builder`来创建的，也就是创建者模式，这个模式很简单，不知道的自行百度，谷歌。\n好，我们来看看这个`builder`做了什么,除了初始化有个`Platform.get()`,直接看最后的`build()`,其余的方法都是设置参数，主要就是这个`build()`：\n\n```java\npublic Builder() {\n      this(Platform.get());\n}\npublic Retrofit build() {\n  1.\n      if (baseUrl == null) {\n        throw new IllegalStateException(\"Base URL required.\");\n      }\n  2.\n      okhttp3.Call.Factory callFactory = this.callFactory;\n      if (callFactory == null) {\n        callFactory = new OkHttpClient();\n      }\n  3.\n      Executor callbackExecutor = this.callbackExecutor;\n      if (callbackExecutor == null) {\n        callbackExecutor = platform.defaultCallbackExecutor();\n      }\n  4.\n      // Make a defensive copy of the adapters and add the default Call adapter.\n      List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);\n      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));\n 5.\n      // Make a defensive copy of the converters.\n      List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);\n\n      return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,\n          callbackExecutor, validateEagerly);\n    } \n\n```\n首先一初始化，就做了一件事情，是啥`Platform.get()`，`Platform`是啥？直译过来就是平台啊，平台是啥？为啥要有平台？看下面这个代码`get()`其实\n就是一个就是调用`findPlatform()`：\n\n```java\nprivate static final Platform PLATFORM = findPlatform();\n\nstatic Platform get() {return PLATFORM;}\n\nprivate static Platform findPlatform() {\n    try {\n      Class.forName(\"android.os.Build\");\n      if (Build.VERSION.SDK_INT != 0) {\n        return new Android();\n      }\n    } catch (ClassNotFoundException ignored) {\n    }\n    try {\n      Class.forName(\"java.util.Optional\");\n      return new Java8();\n    } catch (ClassNotFoundException ignored) {\n    }\n    return new Platform();\n  \n  ```\n\n  有`Android`和`Java8`两种平台，`Android`我们还是能理解的，为啥还有个`Java8`，不要问我，我也不知道啊，`Retrofit`的作者炒鸡暖男，关心全世界各种码农，\n  我是个写android代码的我们就看`Android`平台就好了\n  下面我们来看一下`build()`这个方法：\n- 第一步很简单，没有`baseUrl`抛出异常，最基本的没有，事情没法干是吧。\n- 第二步，如果没有给他设置`callFactory`，那默认给他一个`callFactory`，默认就是新创建一个`OkHttpClient`，这里可能我们会有自己做过一些\n处理的`OkHttpClient`,比如加了`Interceptor`啊之类的，设置进来就好了，就不会用默认的。\n有人可能会问啥是`callFactory`啊 ？`callFactory`嘛，就是call的factory嘛，call是啥，就是请求，factory是啥，就是工厂，`callFactory`就是创建请求的\n工厂，`OkHttpClient`就是一个很牛逼的创建请求的工厂，不在本文讨论范围内，就不多言了。\n- 第三步，设置`callbackExecutor`,又来一个，这`callbackExecutor`又是啥呢？`callback`就是回调嘛，啥回调，就是网络请求返回回来数据的回调，`executor`呢，就是执行者\n，合起来就是回调的执行者，意思网络成功了之后交给他它了。如果你没有设置它就自己整一个默认的回调嘛，不能没有。但是这里它要搞事情了，它返回了一个啥？\n`platform.defaultCallbackExecutor();`来，我们看一下`android`下它返回的是啥：\n```java\nstatic class Android extends Platform {\n    @Override public Executor defaultCallbackExecutor() {\n      return new MainThreadExecutor();\n    }\n\n    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {\n      return new ExecutorCallAdapterFactory(callbackExecutor);\n    }\n\n    static class MainThreadExecutor implements Executor {\n      private final Handler handler = new Handler(Looper.getMainLooper());\n\n      @Override public void execute(Runnable r) {\n        handler.post(r);\n      }\n    }\n  }\n```\n是啥？`MainThreadExecutor()`啊，啥意思就是主线程啊，下面写的明明白白的`Looper.getMainLooper()`再把要执行的`Runnable`post到主线程上执行\n因为它是默认的嘛，可能就说大多数人都是得到数据更新UI啊啥的，所以就默认在主线程上执行回调了。我就不想拿到数据在主线程座做咋办，我拿到数据我就想更新数据库，\n我想在IO线程上搞事情，那就自己写个`callbackExecutor`，自己在IO线程上做就好了，人家提供了一个方法`callbackExecutor(Executor executor)`给你，你自己设置进去就好了\n\n- 第四步是啥？看代码说话，那就是设置`callAdapterFactory`啊 。`callAdapterFactory`又是什么鬼啊，和上面一样啊，拆分一下呀。`CallAdapter`啥意思，就是请求的\n适配器，请求的适配器是什么鬼啊。来来来我告诉你，你看看源码里面根目录是不是有一个包名字叫做`'retrofit-adapter'`,这个包就是实现了一些列的`CallAdapter`\n意思就是你想将返回的数据用什么东西包装起来，比如你用`Rxjava`的话想返回`Observable`，或者高兴，想用`Java8`的`CompletableFuture`，这些都由你呀。\n但是这些都实现了一个叫`CallAdapter`的接口。我们来简单看看这个接口：\n```java\npublic interface CallAdapter<R, T> {\n  Type responseType();\n  T adapt(Call<R> call);\n  abstract class Factory {\n    public abstract CallAdapter<?, ?> get(Type returnType, Annotation[] annotations,\n        Retrofit retrofit);\n    protected static Type getParameterUpperBound(int index, ParameterizedType type) {\n      return Utils.getParameterUpperBound(index, type);\n    }\n    protected static Class<?> getRawType(Type type) {\n      return Utils.getRawType(type);\n    }\n  }\n}\n```\n其实接口里面就是两个方法还有一个静态的工厂类。`responseType()`这个方法决定请求回来之后返回的是什么类型的数据。比如在示例用法中我们的`List<Integer>`\n`adapt()`这个方法是干嘛的呢？就是适配嘛，就是怎样把返回回来的数据通过这个方法包装成你想要的对象。\n这里看到这个名字`adapter`你想到了啥，其实就是传说中的适配器模式啊，就是我给你定义一个接口放这里，我在框架里的逻辑就用这个接口来做就好了，至于你想要怎样的实现，\n想用框架供给你的一些实现比如`Rxjava`或者`Java8`的`CallAdapter`,或者是你自己心情好想用自己的实现一个其他的`CallAdapter`，你自己决定就好了。这就是传说中的啥？？扩展性好啊。\n继续看`build()`\n这个方法，它调用的是`adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));·\n再回来`Platform`看`defaultCallAdapterFactory()`返回的是一个`ExecutorCallAdapterFactory`。这个类他么的又来干嘛，当然是搞事情。\n进去瞅一眼，发现了什么？它当然是继承`CallAdapter.Factory`了，这个不说了，看几句代码来，看它的`get()`方法，看看这个工厂是怎么造`CallAdapter`的：\n```java\n  public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {\n    if (getRawType(returnType) != Call.class) {\n      return null;\n    }\n    final Type responseType = Utils.getCallResponseType(returnType);\n    return new CallAdapter<Object, Call<?>>() {\n      @Override public Type responseType() {\n        return responseType;\n      }\n\n      @Override public Call<Object> adapt(Call<Object> call) {\n        return new ExecutorCallbackCall<>(callbackExecutor, call);\n      }\n    };\n  }\n  ```\n  返回了一个简单新创建的实现`CallAdapter`ç匿名类。注意看看这里的`adapt()`方法，前面讲了就是用它来实现到底返回什么包装对象的逻辑。这里返回的是一个\n  `ExecutorCallbackCall`,`ExecutorCallbackCall`是这`ExecutorCallAdapterFactory`里面的一个内部类.来看看它的代码：\n\n  ```java\n  static final class ExecutorCallbackCall<T> implements Call<T> {\n    final Executor callbackExecutor;\n    final Call<T> delegate;\n\n    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {\n      this.callbackExecutor = callbackExecutor;\n      this.delegate = delegate;\n    }\n\n    @Override public void enqueue(final Callback<T> callback) {\n      if (callback == null) throw new NullPointerException(\"callback == null\");\n\n      delegate.enqueue(new Callback<T>() {\n        @Override public void onResponse(Call<T> call, final Response<T> response) {\n          callbackExecutor.execute(new Runnable() {\n            @Override public void run() {\n              if (delegate.isCanceled()) {\n                // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.\n                callback.onFailure(ExecutorCallbackCall.this, new IOException(\"Canceled\"));\n              } else {\n                callback.onResponse(ExecutorCallbackCall.this, response);\n              }\n            }\n          });\n        }\n\n        @Override public void onFailure(Call<T> call, final Throwable t) {\n          callbackExecutor.execute(new Runnable() {\n            @Override public void run() {\n              callback.onFailure(ExecutorCallbackCall.this, t);\n            }\n          });\n        }\n      });\n    }\n\n    @Override public boolean isExecuted() {\n      return delegate.isExecuted();\n    }\n\n    @Override public Response<T> execute() throws IOException {\n      return delegate.execute();\n    }\n\n    @Override public void cancel() {\n      delegate.cancel();\n    }\n\n    @Override public boolean isCanceled() {\n      return delegate.isCanceled();\n    }\n\n    @SuppressWarnings(\"CloneDoesntCallSuperClone\") // Performing deep clone.\n    @Override public Call<T> clone() {\n      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());\n    }\n\n    @Override public Request request() {\n      return delegate.request();\n    }\n  }\n  ```\n  它实现了`Call`这个接口，`Call`我们前面说了，是啥，就是一个请求嘛，然而我们看这里并没有实际做请求而是用了一个静态代理，\n  通过代理类的实现来实现call请求，而在这里面做了一些其他的逻辑比如`cancel`的逻辑，而实际上做请求的还是交个了`delegate -> OkHttpCall`.\n\n- 第五步，接着看上面的`build()`的代码，不要着急，第一段代码还没讲完呢。第五步是什么？`List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);`\n这一步就是关于`Converter`，顾名思义，它就是一个转换器，什么转换器，数据的转换器，我们从后端获取到的数据，一般都是一些序列化的数据，例如`json`,`xml`,`protobuf`之类的\n而æ们前端用到的需要的是一个对象，我们就需要吧这些序列化的数据转换成我们想要的能直接用的用起来爽的对象，这时候就需要现在登场的这个东西。现在`json`用的\n比较多，我们平时都会用什么`gson`,`jackson`或者其他的三方库来转化它，你觉得哪个用起来高兴就可以用什么写一个`Converter`,然后用`Builder`中的`addConverterFactory`\n就可以用你想要的了，而且你都不用写，因为官方提供了好多种`Converter`的，在根目录下的`'retrofit-converters'`这个包下面，你只需要用就好了，那我们这里如果没有设置过`converterFactories`\n咋办？咋办？没设置，后面找不到会**报错的**。\n这里的`Response`是`Retrofit`对`OkHttp`的`ResponseBody`封装了一些逻辑的类，源码就不贴了，自己点进去看看。\n这里我们顺便看看`Converter`这个接口：\n```java\npublic interface Converter<F, T> {\n  T convert(F value) throws IOException;\n  abstract class Factory {\n    \n    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,\n        Retrofit retrofit) {\n      return null;\n    }\n    public Converter<?, RequestBody> requestBodyConverter(Type type,\n        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n      return null;\n    }\n    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,\n        Retrofit retrofit) {\n      return null;\n    }\n  }\n}\n```\n接口就一个方法，就是转换，然后里面还有一个静态的工厂类我们看到里面有3个方法，其实很好理解。我们需要把返回来的`ResponseBody`里的数据转换\n成我们想要的东西，我们也会想要把我们`RequestBody`程序里的东西转换成后端想要的东西.就是这个逻辑拉，这个工厂类就是给我们提供各种转换器，我们\n只需要根据我们自己的需求来实现或者使用对应的就好了。这又是啥，还是和上面一样啊ï¼给你定义一个接口，接口是什么，就是标准，给你一个标准\n你实现这个标准就行，我用我这套标准来实现我内部的逻辑，至于你怎么实现，想用啥方法实现，玩成什么花样都可以，我不管，只要你遵循了标准，就可以。这样\n扩展性就好呀。这就是人家大神牛逼之处啊，代码写到高处就是写标准啊。\n讲到这里，我们示例用法中的第一句`Retrofit retrofit = new Retrofit.Builder().baseUrl(\"xxx\").build();`总算讲完了。中间这么多逻辑，这么\n多心血，你看，你一句话就搞定了，是不是该学习学习。\n\n### 代理\n\nbuild好了之后，就是需要的材料都搞齐了，要工厂有工厂要材料有材料，下面我们来讲讲这第二句，第二句，那厉害了。其实他就是啥，利用你定义的一个充满各种注解的接口`interface GitHub()`来简单粗暴的做了一个动作，\n那就是`create()`。这个动作看似简单，实则过于粗暴啊，进去ç看代码\n\n```java\npublic <T> T create(final Class<T> service) {\n  1.\n    Utils.validateServiceInterface(service);\n  2.\n    if (validateEagerly) {\n      eagerlyValidateMethods(service);\n    }\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\n        new InvocationHandler() {\n          private final Platform platform = Platform.get();\n\n          @Override public Object invoke(Object proxy, Method method, Object... args)\n              throws Throwable {\n            3.\n            // If the method is a method from Object then defer to normal invocation.\n            if (method.getDeclaringClass() == Object.class) {\n              return method.invoke(this, args);\n            }\n            if (platform.isDefaultMethod(method)) {\n              return platform.invokeDefaultMethod(method, service, proxy, args);\n            }\n            4.\n            ServiceMethod<Object, Object> serviceMethod =\n                (ServiceMethod<Object, Object>) loadServiceMethod(method);\n            5.\n            OkHttpCall<Object> okHttpCall = new OkHttpCall<>(serviceMethod, args);\n            6.\n            return serviceMethod.callAdapter.adapt(okHttpCall);\n          }\n        });\n  }\n```\n这里你首先要了解的知识是泛型，反射，动态代理。如果不懂，请自行google.好吧，我说下动态代理，动态代理就是动态的代理，就是只要你实现了一个借口，`Proxy`就可以根据这个接口来对你\n实现代理，也就是说`Proxy`只能代理实现了接口的类。这也就是为什么我们要写一个`Interface`来作为`Service`,然后在里面写一些注解之类的。如果接触过`JAVAEE`的话，\n`Spring`里的AOP动态代理是采用`cglib`来修改字节码实现的动态代理，而且不需要实现接口，感兴趣的朋友可以看一下。回到这里，就是通过`Proxy`这个类利用反射，对你写的接口进行解析\n获取到你申明的方法，然后对你的方法实现框架想要实现的逻辑，来完成所谓的ä»£理。\n我们来看代码。\n\n- 第一步，就是检验你定义的`service`接口是不是正确。简单看下代码,首先如果不是接口会抛出异常，还有为了避免出现bug,和保证API都是统一的标准，不允许定义的`Service`接口继承别的接口\n```java\nstatic <T> void validateServiceInterface(Class<T> service) {\n    if (!service.isInterface()) {\n      throw new IllegalArgumentException(\"API declarations must be interfaces.\");\n    }\n    // Prevent API interfaces from extending other interfaces. This not only avoids a bug in\n    // Android (http://b.android.com/58753) but it forces composition of API declarations which is\n    // the recommended pattern.\n    if (service.getInterfaces().length > 0) {\n      throw new IllegalArgumentException(\"API interfaces must not extend other interfaces.\");\n    }\n  }\n  ```\n- 第二步，如果你在前面`creat()`的时候，设置过`validateEagerly`为`true`的话，它会在这一步将所有的你`Service`中声明的`Method`在这里都å始化了,并且缓存起来\n```java\nprivate void eagerlyValidateMethods(Class<?> service) {\n    Platform platform = Platform.get();\n    for (Method method : service.getDeclaredMethods()) {\n      if (!platform.isDefaultMethod(method)) {\n        loadServiceMethod(method);\n      }\n    }\n  }\n\n  ServiceMethod<?, ?> loadServiceMethod(Method method) {\n    ServiceMethod<?, ?> result = serviceMethodCache.get(method);\n    if (result != null) return result;\n\n    synchronized (serviceMethodCache) {\n      result = serviceMethodCache.get(method);\n      if (result == null) {\n        result = new ServiceMethod.Builder<>(this, method).build();\n        serviceMethodCache.put(method, result);\n      }\n    }\n    return result;\n  }\n  ```\n  这里在解析你用`annotations`标注的`Method`时也一样用到了`Builder`这种模式，通过`ServiceMethod`这个类来解析你的标注，将标准转化为实际的逻辑。\n  这里面的代码比较多，我就不再贴了，其实里面的逻辑比较单一，但是比较复杂。主要就是根据不同的标注，来生成对应的对象，你用着有多简单就有框架来给你承受多复杂。只看一下他的`Constructor`\n  最后会得到着一些东西。\n  ```java\n    ServiceMethod(Builder<R, T> builder) {\n      this.callFactory = builder.retrofit.callFactory();\n      this.callAdapter = builder.callAdapter;\n      this.baseUrl = builder.retrofit.baseUrl();\n      this.responseConverter = builder.responseConverter;\n      this.httpMethod = builder.httpMethod;\n      this.relativeUrl = builder.relativeUrl;\n      this.headers = builder.headers;\n      this.contentType = builder.contentType;\n      this.hasBody = builder.hasBody;\n      this.isFormEncoded = builder.isFormEncoded;\n      this.isMultipart = builder.isMultipart;\n      this.parameterHandlers = builder.parameterHandlers\n    }\n  ```\n\n- 第三步，这时候就进入到每个方法的代理实现里来了。实际上这里面是已经进入了上面例子中的第三句了，因为是为每一个其中的方法实ç°代理`Call<List<Integer>> call = gitHub.contributors(\"xx\", \"xx\");`的流程了。\n如果是`Object`声明的方法，直接执行原方法，然后`platform.isDefaultMethod(method)`在`Android`平台直接返回`false`，所以这里直接忽略。\n- 第四步，这里如果第二步没有build过这个方法，或者缓存里没有会`build`这个方法，缓存里有的话直接取过来。\n- 第五步，根据`serviceMethod`初始化`OkHttpCall`,真正执行请求是交给这个类来执行的。\n- 第六步，根据`OkHttpCall`最后返回`CallAdapter`适配后的你想要的类型.到这里就通过代理得到了一个所有参数，`headers`或者其他都准备好了的，并且也通过`CallAdapter`实现了返回数据包装的一个完整的数据类型.\n\n讲到这里，准备工作都已经做齐了，就等着最后执行了。这里的`Call`是根据你设置的`CallAdapter`来返回的，比如如果你熟悉`Rxjava`，那结合`Rxjava`，这里也可以\n返回一个`Observable`.当然你å¨定义这个`Service`接口的时候也应该声明为这个返回类型。就算是`Call` ,也不是返回`OkHttpCall`,前面讲到了`ExecutorCallbackCall`来静态代理了\n`OkHttpCall`，实际上这里返回的是`ExecutorCallbackCall`.\n\n### 执行\n\n如果是`ExecutorCallbackCall`的话，提供了同步的`excute`和异步的`enqueue`来执行这个请求，并且提供一个`Callback`回调的接口来处理调用成功\n或者失败。调用之后是如何拿到数据之后，被`Converter`转化，被`CallAdapter`包装然后返回给我们的呢？\n来我们慢慢分析。前面我们提到了，其实所有的请求执行，实际上都是`OkHttpCall`这个类在操作。`OkHttpCall`实现了`Call`接口，就是一些请求的常用逻辑，同步异步cancel等等，\n不管是同步还是异步，最后都是拿到返回的`Response`转换成我们想要的数据。我们挑一个`OkHttpCall`中同步的方法看看：\n\n```java \n  @Override \n  public Response<T> execute() throws IOException {\n      okhttp3.Call call;\n\n      synchronized (this) {\n        ... 中间逻辑很简单就省略了\n\n      return parseResponse(call.execute());\n     }\n  }\n\n\n Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {\n    ResponseBody rawBody = rawResponse.body();\n    rawResponse = rawResponse.newBuilder()\n        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))\n        .build();\n\n    int code = rawResponse.code();\n    if (code < 200 || code >= 300) {\n      try {\n        // Buffer the entire body to avoid future I/O.\n        ResponseBody bufferedBody = Utils.buffer(rawBody);\n        return Response.error(bufferedBody, rawResponse);\n      } finally {\n        rawBody.close();\n      }\n    }\n\n    if (code == 204 || code == 205) {\n      rawBody.close();\n      return Response.success(null, rawResponse);\n    }\n\n    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);\n    try {\n      T body = serviceMethod.toResponse(catchingBody);\n      return Response.success(body, rawResponse);\n    } catch (RuntimeException e) {\n      // If the underlying source threw an exception, propagate that rather than indicating it was\n      // a runtime exception.\n      catchingBody.throwIfCaught();\n      throw e;\n    }\n  }\n  ```\n首先我们就来看`Retrofit`在执行后是怎么讲`response`转换成我们想要的数据的。`excute()`执行后中间有点失败取消的逻辑，最后就是直接把成功后的`response`交给\n`parseResponse()`这个方法，这里先转化为一个没有`body`数据的`response`来做状态判断，如果需要转换数据，把原来的`ResponseBody`转换为一个静态代理的`ExceptionCatchingRequestBody`\n交给`serviceMethod.toResponse(catchingBody)`，主要是为了做一些异常处理。顺着这个流程我们进`ServiceMethod`来看看`toResponse（）`这个方法。\n```\n/** Builds a method return value from an HTTP response body. */\n public ServiceMethod build() {\n   ...\n    responseConverter = createResponseConverter();\n    ...\n }\n\n  R toResponse(ResponseBody body) throws IOException {\n    return responseConverter.convert(body);\n  }\n\n \n\nprivate Converter<ResponseBody, T> createResponseConverter() {\n      Annotation[] annotations = method.getAnnotations();\n      try {\n        return retrofit.responseBodyConverter(responseType, annotations);\n      } catch (RuntimeException e) { // Wide exception range because factories are user code.\n        throw methodError(e, \"Unable to create converter for %s\", responseType);\n      }\n    }\n ```\n\n很简单就是交给了`Converter`来做转换。`Converter`看起来是不是很眼熟。前面我们好像设置了啊。最后又回到了`Retrofit`这个类，来看看\n`responseBodyConverter（）`这个方法：\n```java\n  public <T> Converter<T, RequestBody> requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {\n    return nextRequestBodyConverter(null, type, parameterAnnotations, methodAnnotations);\n  }\n\n  public <T> Converter<T, RequestBody> nextRequestBodyConverter(Converter.Factory skipPast,\n      Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {\n    checkNotNull(type, \"type == null\");\n    checkNotNull(parameterAnnotations, \"parameterAnnotations == null\");\n    checkNotNull(methodAnnotations, \"methodAnnotations == null\");\n\n    int start = converterFactories.indexOf(skipPast) + 1;\n    for (int i = start, count = converterFactories.size(); i < count; i++) {\n      Converter.Factory factory = converterFactories.get(i);\n      Converter<?, RequestBody> converter =\n          factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);\n      if (converter != null) {\n        //noinspection unchecked\n        return (Converter<T, RequestBody>) converter;\n      }\n    }\n\n   ...build string\n    throw new IllegalArgumentException(builder.toString());\n  }\n  ```\n  其实很简单，就是返回`factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);`，就是å·¥厂造一个`Converter`\n  这个工厂造的`Converter`怎么造，框架是不管的，总之你按照我给你定义的标准造一个来就是了。感兴趣就去看看`'retrofit-converters'`这个包里是怎么造的，也很简单\n  然后通过`Converter`的`convert()`方法就把你想要的类型数据返回给你了，这个`convert()`方法也是你在实现`Converter`要自己实现的，当然源码里提供了一些实现，你自己去看。\n\n\n  \n  整个流程就是这样的。希望对你阅读源代码有帮助。\n","slug":"Retrofit-源码解析","published":1,"updated":"2018-06-08T02:12:33.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji5c6jl80007oa50hx107i5h","content":"<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>Retrofit最简单的用法就是定义一个接口，创建<code>Retrofit</code>对象，调用<code>create()</code>方法得到一个<code>service</code>,<br>然后自己根据<code>service</code>中的方法去做同步或者异步的请求，拿到数据对象，十分简单快速，简单代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHub</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@GET</span>(<span class=\"string\">\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\"</span>)</span><br><span class=\"line\">   Call&lt;List&lt;Integer&gt;&gt; contributors(<span class=\"meta\">@Path</span>(<span class=\"string\">\"owner\"</span>) String owner,<span class=\"meta\">@Path</span>(<span class=\"string\">\"repo\"</span>) String repo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.创建</span><br><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(<span class=\"string\">\"xxx\"</span>).build();</span><br><span class=\"line\">.代理</span><br><span class=\"line\">GitHub gitHub = retrofit.create(GitHub.class);</span><br><span class=\"line\">Call&lt;List&lt;Integer&gt;&gt; call = gitHub.contributors(<span class=\"string\">\"xx\"</span>, <span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\">.执行</span><br><span class=\"line\">call.enqueue(<span class=\"keyword\">new</span> Callback&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;List&lt;Integer&gt;&gt; call, Response&lt;List&lt;Integer&gt;&gt; response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;List&lt;Integer&gt;&gt; call, Throwable t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>那这么简单的过程，刚开始看的时候觉得有点懵é¼呀，怎么他就帮你完成了请求，你明明什么都没有做，下面我们按照它的流程慢慢来解析一下整个过程。<br>我们要用<code>Retrofit</code>,首先自然是要创建它,也就是这行代码<code>Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;xxx&quot;).build();</code>.<br>这里创建<code>Retrofit</code>是通过它的一个内部类<code>Builder</code>来创建的，也就是创建者模式，这个模式很简单，不知道的自行百度，谷歌。<br>好，我们来看看这个<code>builder</code>做了什么,除了初始化有个<code>Platform.get()</code>,直接看最后的<code>build()</code>,其余的方法都是设置参数，主要就是这个<code>build()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(Platform.get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Retrofit <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>.</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (baseUrl == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Base URL required.\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">2</span>.</span><br><span class=\"line\">      okhttp3.Call.Factory callFactory = <span class=\"keyword\">this</span>.callFactory;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callFactory = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">3</span>.</span><br><span class=\"line\">      Executor callbackExecutor = <span class=\"keyword\">this</span>.callbackExecutor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callbackExecutor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">4</span>.</span><br><span class=\"line\">      <span class=\"comment\">// Make a defensive copy of the adapters and add the default Call adapter.</span></span><br><span class=\"line\">      List&lt;CallAdapter.Factory&gt; adapterFactories = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.adapterFactories);</span><br><span class=\"line\">      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</span><br><span class=\"line\"> <span class=\"number\">5</span>.</span><br><span class=\"line\">      <span class=\"comment\">// Make a defensive copy of the converters.</span></span><br><span class=\"line\">      List&lt;Converter.Factory&gt; converterFactories = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.converterFactories);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,</span><br><span class=\"line\">          callbackExecutor, validateEagerly);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>首先一初始化，就做了一件事情，是啥<code>Platform.get()</code>，<code>Platform</code>是啥？直译过来就是平台啊，平台是啥？为啥要有平台？看下面这个代码<code>get()</code>其实<br>就是一个就是调用<code>findPlatform()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Platform PLATFORM = findPlatform();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Platform <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> PLATFORM;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Platform <span class=\"title\">findPlatform</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class.forName(<span class=\"string\">\"android.os.Build\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Android();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class.forName(<span class=\"string\">\"java.util.Optional\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Java8();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Platform();</span><br></pre></td></tr></table></figure>\n<p>  有<code>Android</code>和<code>Java8</code>两种平台，<code>Android</code>我们还是能理解的，为啥还有个<code>Java8</code>，不要问我，我也不知道啊，<code>Retrofit</code>的作者炒鸡暖男，关心全世界各种码农，<br>  我是个写android代码的我们就看<code>Android</code>平台就好了<br>  下面我们来看一下<code>build()</code>这个方法：</p>\n<ul>\n<li>第一步很简单，没有<code>baseUrl</code>抛出异常，最基本的没有，事情没法干是吧。</li>\n<li>第二步，如果没有给他设置<code>callFactory</code>，那默认给他一个<code>callFactory</code>，默认就是新创建一个<code>OkHttpClient</code>，这里可能我们会有自己做过一些<br>处理的<code>OkHttpClient</code>,比如加了<code>Interceptor</code>啊之类的，设置进来就好了，就不会用默认的。<br>有人可能会问啥是<code>callFactory</code>啊 ？<code>callFactory</code>嘛，就是call的factory嘛，call是啥，就是请求，factory是啥，就是工厂，<code>callFactory</code>就是创建请求的<br>工厂，<code>OkHttpClient</code>就是一个很牛逼的创建请求的工厂，不在本文讨论范围内，就不多言了。</li>\n<li>第三步，设置<code>callbackExecutor</code>,又来一个，这<code>callbackExecutor</code>又是啥呢？<code>callback</code>就是回调嘛，啥回调，就是网络请求返回回来数据的回调，<code>executor</code>呢，就是执行者<br>，合起来就是回调的执行者，意思网络成功了之后交给他它了。如果你没有设置它就自己整一个默认的回调嘛，不能没有。但是这里它要搞事情了，它返回了一个啥？<br><code>platform.defaultCallbackExecutor();</code>来，我们看一下<code>android</code>下它返回的是啥：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Android</span> <span class=\"keyword\">extends</span> <span class=\"title\">Platform</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">defaultCallbackExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainThreadExecutor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> CallAdapter.<span class=\"function\">Factory <span class=\"title\">defaultCallAdapterFactory</span><span class=\"params\">(Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallAdapterFactory(callbackExecutor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainThreadExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler handler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">        handler.post(r);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>是啥？<code>MainThreadExecutor()</code>啊，啥意思就是主线程啊，下面写的明明白白的<code>Looper.getMainLooper()</code>再把要执行的<code>Runnable</code>post到主线程上执行<br>因为它是默认的嘛，可能就说大多数人都是得到数据更新UI啊啥的，所以就默认在主线程上执行回调了。我就不想拿到数据在主线程座做咋办，我拿到数据我就想更新数据库，<br>我想在IO线程上搞事情，那就自己写个<code>callbackExecutor</code>，自己在IO线程上做就好了，人家提供了一个方法<code>callbackExecutor(Executor executor)</code>给你，你自己设置进去就好了</p>\n<ul>\n<li>第四步是啥？看代码说话，那就是设置<code>callAdapterFactory</code>啊 。<code>callAdapterFactory</code>又是什么鬼啊，和上面一样啊，拆分一下呀。<code>CallAdapter</code>啥意思，就是请求的<br>适配器，请求的适配器是什么鬼啊。来来来我告诉你，你看看源码里面根目录是不是有一个包名字叫做<code>&#39;retrofit-adapter&#39;</code>,这个包就是实现了一些列的<code>CallAdapter</code><br>意思就是你想将返回的数据用什么东西包装起来，比如你用<code>Rxjava</code>的话想返回<code>Observable</code>，或者高兴，想用<code>Java8</code>的<code>CompletableFuture</code>，这些都由你呀。<br>但是这些都实现了一个叫<code>CallAdapter</code>的接口。我们来简单看看这个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallAdapter</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Type <span class=\"title\">responseType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">T <span class=\"title\">adapt</span><span class=\"params\">(Call&lt;R&gt; call)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Type <span class=\"title\">getParameterUpperBound</span><span class=\"params\">(<span class=\"keyword\">int</span> index, ParameterizedType type)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Utils.getParameterUpperBound(index, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getRawType(Type type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Utils.getRawType(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实接口里面就是两个方法还有一个静态的工厂类。<code>responseType()</code>这个方法决定请求回来之后返回的是什么类型的数据。比如在示例用法中我们的<code>List&lt;Integer&gt;</code><br><code>adapt()</code>这个方法是干嘛的呢？就是适配嘛，就是怎样把返回回来的数据通过这个方法包装成你想要的对象。<br>这里看到这个名字<code>adapter</code>你想到了啥，其实就是传说中的适配器模式啊，就是我给你定义一个接口放这里，我在框架里的逻辑就用这个接口来做就好了，至于你想要怎样的实现，<br>想用框架供给你的一些实现比如<code>Rxjava</code>或者<code>Java8</code>的<code>CallAdapter</code>,或者是你自己心情好想用自己的实现一个其他的<code>CallAdapter</code>，你自己决定就好了。这就是传说中的啥？？扩展性好啊。<br>继续看<code>build()</code><br>这个方法，它调用的是<code>adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));·\n再回来</code>Platform<code>看</code>defaultCallAdapterFactory()<code>返回的是一个</code>ExecutorCallAdapterFactory<code>。这个类他么的又来干嘛，当然是搞事情。\n进去瞅一眼，发现了什么？它当然是继承</code>CallAdapter.Factory<code>了，这个不说了，看几句代码来，看它的</code>get()<code>方法，看看这个工厂是怎么造</code>CallAdapter`的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getRawType(returnType) != Call.class) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Type responseType = Utils.getCallResponseType(returnType);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">responseType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> responseType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Call&lt;Object&gt; <span class=\"title\">adapt</span><span class=\"params\">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  返回了一个简单新创建的实现<code>CallAdapter</code>ç匿名类。注意看看这里的<code>adapt()</code>方法，前面讲了就是用它来实现到底返回什么包装对象的逻辑。这里返回的是一个<br>  <code>ExecutorCallbackCall</code>,<code>ExecutorCallbackCall</code>是这<code>ExecutorCallAdapterFactory</code>里面的一个内部类.来看看它的代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutorCallbackCall</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Call</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Executor callbackExecutor;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Call&lt;T&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbackExecutor = callbackExecutor;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(<span class=\"keyword\">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"callback == null\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    delegate.enqueue(<span class=\"keyword\">new</span> Callback&lt;T&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;T&gt; call, <span class=\"keyword\">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class=\"line\">        callbackExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (delegate.isCanceled()) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.</span></span><br><span class=\"line\">              callback.onFailure(ExecutorCallbackCall.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Canceled\"</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              callback.onResponse(ExecutorCallbackCall.<span class=\"keyword\">this</span>, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;T&gt; call, <span class=\"keyword\">final</span> Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        callbackExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            callback.onFailure(ExecutorCallbackCall.<span class=\"keyword\">this</span>, t);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExecuted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.isExecuted();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response&lt;T&gt; <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.execute();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    delegate.cancel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCanceled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.isCanceled();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"CloneDoesntCallSuperClone\"</span>) <span class=\"comment\">// Performing deep clone.</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Call&lt;T&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, delegate.clone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.request();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  它实现了<code>Call</code>这个接口，<code>Call</code>我们前面说了，是啥，就是一个请求嘛，然而我们看这里并没有实际做请求而是用了一个静态代理，<br>  通过代理类的实现来实现call请求，而在这里面做了一些其他的逻辑比如<code>cancel</code>的逻辑，而实际上做请求的还是交个了<code>delegate -&gt; OkHttpCall</code>.</p>\n<ul>\n<li>第五步，接着看上面的<code>build()</code>的代码，不要着急，第一段代码还没讲完呢。第五步是什么？<code>List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;(this.converterFactories);</code><br>这一步就是关于<code>Converter</code>，顾名思义，它就是一个转换器，什么转换器，数据的转换器，我们从后端获取到的数据，一般都是一些序列化的数据，例如<code>json</code>,<code>xml</code>,<code>protobuf</code>之类的<br>而æ们前端用到的需要的是一个对象，我们就需要吧这些序列化的数据转换成我们想要的能直接用的用起来爽的对象，这时候就需要现在登场的这个东西。现在<code>json</code>用的<br>比较多，我们平时都会用什么<code>gson</code>,<code>jackson</code>或者其他的三方库来转化它，你觉得哪个用起来高兴就可以用什么写一个<code>Converter</code>,然后用<code>Builder</code>中的<code>addConverterFactory</code><br>就可以用你想要的了，而且你都不用写，因为官方提供了好多种<code>Converter</code>的，在根目录下的<code>&#39;retrofit-converters&#39;</code>这个包下面，你只需要用就好了，那我们这里如果没有设置过<code>converterFactories</code><br>咋办？咋办？没设置，后面找不到会<strong>报错的</strong>。<br>这里的<code>Response</code>是<code>Retrofit</code>对<code>OkHttp</code>的<code>ResponseBody</code>封装了一些逻辑的类，源码就不贴了，自己点进去看看。<br>这里我们顺便看看<code>Converter</code>这个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">T <span class=\"title\">convert</span><span class=\"params\">(F value)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class=\"line\">        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;?, String&gt; stringConverter(Type type, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接口就一个方法，就是转换，然后里面还有一个静态的工厂类我们看到里面有3个方法，其实很好理解。我们需要把返回来的<code>ResponseBody</code>里的数据转换<br>成我们想要的东西，我们也会想要把我们<code>RequestBody</code>程序里的东西转换成后端想要的东西.就是这个逻辑拉，这个工厂类就是给我们提供各种转换器，我们<br>只需要根据我们自己的需求来实现或者使用对应的就好了。这又是啥，还是和上面一样啊ï¼给你定义一个接口，接口是什么，就是标准，给你一个标准<br>你实现这个标准就行，我用我这套标准来实现我内部的逻辑，至于你怎么实现，想用啥方法实现，玩成什么花样都可以，我不管，只要你遵循了标准，就可以。这样<br>扩展性就好呀。这就是人家大神牛逼之处啊，代码写到高处就是写标准啊。<br>讲到这里，我们示例用法中的第一句<code>Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;xxx&quot;).build();</code>总算讲完了。中间这么多逻辑，这么<br>多心血，你看，你一句话就搞定了，是不是该学习学习。</p>\n<h3 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h3><p>build好了之后，就是需要的材料都搞齐了，要工厂有工厂要材料有材料，下面我们来讲讲这第二句，第二句，那厉害了。其实他就是啥，利用你定义的一个充满各种注解的接口<code>interface GitHub()</code>来简单粗暴的做了一个动作，<br>那就是<code>create()</code>。这个动作看似简单，实则过于粗暴啊，进去ç看代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>.</span><br><span class=\"line\">    Utils.validateServiceInterface(service);</span><br><span class=\"line\">  <span class=\"number\">2</span>.</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (validateEagerly) &#123;</span><br><span class=\"line\">      eagerlyValidateMethods(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Platform platform = Platform.get();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span></span><br><span class=\"line\"><span class=\"function\">              <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"number\">3</span>.</span><br><span class=\"line\">            <span class=\"comment\">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"number\">4</span>.</span><br><span class=\"line\">            ServiceMethod&lt;Object, Object&gt; serviceMethod =</span><br><span class=\"line\">                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class=\"line\">            <span class=\"number\">5</span>.</span><br><span class=\"line\">            OkHttpCall&lt;Object&gt; okHttpCall = <span class=\"keyword\">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class=\"line\">            <span class=\"number\">6</span>.</span><br><span class=\"line\">            <span class=\"keyword\">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里你首先要了解的知识是泛型，反射，动态代理。如果不懂，请自行google.好吧，我说下动态代理，动态代理就是动态的代理，就是只要你实现了一个借口，<code>Proxy</code>就可以根据这个接口来对你<br>实现代理，也就是说<code>Proxy</code>只能代理实现了接口的类。这也就是为什么我们要写一个<code>Interface</code>来作为<code>Service</code>,然后在里面写一些注解之类的。如果接触过<code>JAVAEE</code>的话，<br><code>Spring</code>里的AOP动态代理是采用<code>cglib</code>来修改字节码实现的动态代理，而且不需要实现接口，感兴趣的朋友可以看一下。回到这里，就是通过<code>Proxy</code>这个类利用反射，对你写的接口进行解析<br>获取到你申明的方法，然后对你的方法实现框架想要实现的逻辑，来完成所谓的ä»£理。<br>我们来看代码。</p>\n<ul>\n<li><p>第一步，就是检验你定义的<code>service</code>接口是不是正确。简单看下代码,首先如果不是接口会抛出异常，还有为了避免出现bug,和保证API都是统一的标准，不允许定义的<code>Service</code>接口继承别的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">validateServiceInterface</span><span class=\"params\">(Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!service.isInterface()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"API declarations must be interfaces.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Prevent API interfaces from extending other interfaces. This not only avoids a bug in</span></span><br><span class=\"line\">    <span class=\"comment\">// Android (http://b.android.com/58753) but it forces composition of API declarations which is</span></span><br><span class=\"line\">    <span class=\"comment\">// the recommended pattern.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (service.getInterfaces().length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"API interfaces must not extend other interfaces.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二步，如果你在前面<code>creat()</code>的时候，设置过<code>validateEagerly</code>为<code>true</code>的话，它会在这一步将所有的你<code>Service</code>中声明的<code>Method</code>在这里都å始化了,并且缓存起来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">eagerlyValidateMethods</span><span class=\"params\">(Class&lt;?&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    Platform platform = Platform.get();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Method method : service.getDeclaredMethods()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">        loadServiceMethod(method);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) &#123;</span><br><span class=\"line\">    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (serviceMethodCache) &#123;</span><br><span class=\"line\">      result = serviceMethodCache.get(method);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> ServiceMethod.Builder&lt;&gt;(<span class=\"keyword\">this</span>, method).build();</span><br><span class=\"line\">        serviceMethodCache.put(method, result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里在解析你用<code>annotations</code>标注的<code>Method</code>时也一样用到了<code>Builder</code>这种模式，通过<code>ServiceMethod</code>这个类来解析你的标注，将标准转化为实际的逻辑。<br>这里面的代码比较多，我就不再贴了，其实里面的逻辑比较单一，但是比较复杂。主要就是根据不同的标注，来生成对应的对象，你用着有多简单就有框架来给你承受多复杂。只看一下他的<code>Constructor</code><br>最后会得到着一些东西。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceMethod(Builder&lt;R, T&gt; builder) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.callFactory = builder.retrofit.callFactory();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.callAdapter = builder.callAdapter;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.baseUrl = builder.retrofit.baseUrl();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.responseConverter = builder.responseConverter;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpMethod = builder.httpMethod;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.relativeUrl = builder.relativeUrl;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headers = builder.headers;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contentType = builder.contentType;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.hasBody = builder.hasBody;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isFormEncoded = builder.isFormEncoded;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isMultipart = builder.isMultipart;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parameterHandlers = builder.parameterHandlers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三步，这时候就进入到每个方法的代理实现里来了。实际上这里面是已经进入了上面例子中的第三句了，因为是为每一个其中的方法实ç°代理<code>Call&lt;List&lt;Integer&gt;&gt; call = gitHub.contributors(&quot;xx&quot;, &quot;xx&quot;);</code>的流程了。<br>如果是<code>Object</code>声明的方法，直接执行原方法，然后<code>platform.isDefaultMethod(method)</code>在<code>Android</code>平台直接返回<code>false</code>，所以这里直接忽略。</p>\n</li>\n<li>第四步，这里如果第二步没有build过这个方法，或者缓存里没有会<code>build</code>这个方法，缓存里有的话直接取过来。</li>\n<li>第五步，根据<code>serviceMethod</code>初始化<code>OkHttpCall</code>,真正执行请求是交给这个类来执行的。</li>\n<li>第六步，根据<code>OkHttpCall</code>最后返回<code>CallAdapter</code>适配后的你想要的类型.到这里就通过代理得到了一个所有参数，<code>headers</code>或者其他都准备好了的，并且也通过<code>CallAdapter</code>实现了返回数据包装的一个完整的数据类型.</li>\n</ul>\n<p>讲到这里，准备工作都已经做齐了，就等着最后执行了。这里的<code>Call</code>是根据你设置的<code>CallAdapter</code>来返回的，比如如果你熟悉<code>Rxjava</code>，那结合<code>Rxjava</code>，这里也可以<br>返回一个<code>Observable</code>.当然你å¨定义这个<code>Service</code>接口的时候也应该声明为这个返回类型。就算是<code>Call</code> ,也不是返回<code>OkHttpCall</code>,前面讲到了<code>ExecutorCallbackCall</code>来静态代理了<br><code>OkHttpCall</code>，实际上这里返回的是<code>ExecutorCallbackCall</code>.</p>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>如果是<code>ExecutorCallbackCall</code>的话，提供了同步的<code>excute</code>和异步的<code>enqueue</code>来执行这个请求，并且提供一个<code>Callback</code>回调的接口来处理调用成功<br>或者失败。调用之后是如何拿到数据之后，被<code>Converter</code>转化，被<code>CallAdapter</code>包装然后返回给我们的呢？<br>来我们慢慢分析。前面我们提到了，其实所有的请求执行，实际上都是<code>OkHttpCall</code>这个类在操作。<code>OkHttpCall</code>实现了<code>Call</code>接口，就是一些请求的常用逻辑，同步异步cancel等等，<br>不管是同步还是异步，最后都是拿到返回的<code>Response</code>转换成我们想要的数据。我们挑一个<code>OkHttpCall</code>中同步的方法看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response&lt;T&gt; <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">     okhttp3.Call call;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">       ... 中间逻辑很简单就省略了</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> parseResponse(call.execute());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Response&lt;T&gt; <span class=\"title\">parseResponse</span><span class=\"params\">(okhttp3.Response rawResponse)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">   ResponseBody rawBody = rawResponse.body();</span><br><span class=\"line\">   rawResponse = rawResponse.newBuilder()</span><br><span class=\"line\">       .body(<span class=\"keyword\">new</span> NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))</span><br><span class=\"line\">       .build();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> code = rawResponse.code();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (code &lt; <span class=\"number\">200</span> || code &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Buffer the entire body to avoid future I/O.</span></span><br><span class=\"line\">       ResponseBody bufferedBody = Utils.buffer(rawBody);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Response.error(bufferedBody, rawResponse);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">       rawBody.close();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (code == <span class=\"number\">204</span> || code == <span class=\"number\">205</span>) &#123;</span><br><span class=\"line\">     rawBody.close();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Response.success(<span class=\"keyword\">null</span>, rawResponse);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   ExceptionCatchingRequestBody catchingBody = <span class=\"keyword\">new</span> ExceptionCatchingRequestBody(rawBody);</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     T body = serviceMethod.toResponse(catchingBody);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Response.success(body, rawResponse);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class=\"line\">     <span class=\"comment\">// a runtime exception.</span></span><br><span class=\"line\">     catchingBody.throwIfCaught();</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>首先我们就来看<code>Retrofit</code>在执行后是怎么讲<code>response</code>转换成我们想要的数据的。<code>excute()</code>执行后中间有点失败取消的逻辑，最后就是直接把成功后的<code>response</code>交给<br><code>parseResponse()</code>这个方法，这里先转化为一个没有<code>body</code>数据的<code>response</code>来做状态判断，如果需要转换数据，把原来的<code>ResponseBody</code>转换为一个静态代理的<code>ExceptionCatchingRequestBody</code><br>交给<code>serviceMethod.toResponse(catchingBody)</code>，主要是为了做一些异常处理。顺着这个流程我们进<code>ServiceMethod</code>来看看<code>toResponse（）</code>这个方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Builds a method return value from an HTTP response body. */</span><br><span class=\"line\"> public ServiceMethod build() &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">    responseConverter = createResponseConverter();</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  R toResponse(ResponseBody body) throws IOException &#123;</span><br><span class=\"line\">    return responseConverter.convert(body);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">private Converter&lt;ResponseBody, T&gt; createResponseConverter() &#123;</span><br><span class=\"line\">      Annotation[] annotations = method.getAnnotations();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        return retrofit.responseBodyConverter(responseType, annotations);</span><br><span class=\"line\">      &#125; catch (RuntimeException e) &#123; // Wide exception range because factories are user code.</span><br><span class=\"line\">        throw methodError(e, &quot;Unable to create converter for %s&quot;, responseType);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单就是交给了<code>Converter</code>来做转换。<code>Converter</code>看起来是不是很眼熟。前面我们好像设置了啊。最后又回到了<code>Retrofit</code>这个类，来看看<br><code>responseBodyConverter（）</code>这个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Converter&lt;T, RequestBody&gt; <span class=\"title\">requestBodyConverter</span><span class=\"params\">(Type type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Annotation[] parameterAnnotations, Annotation[] methodAnnotations)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nextRequestBodyConverter(<span class=\"keyword\">null</span>, type, parameterAnnotations, methodAnnotations);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Converter&lt;T, RequestBody&gt; <span class=\"title\">nextRequestBodyConverter</span><span class=\"params\">(Converter.Factory skipPast,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations)</span> </span>&#123;</span><br><span class=\"line\">  checkNotNull(type, <span class=\"string\">\"type == null\"</span>);</span><br><span class=\"line\">  checkNotNull(parameterAnnotations, <span class=\"string\">\"parameterAnnotations == null\"</span>);</span><br><span class=\"line\">  checkNotNull(methodAnnotations, <span class=\"string\">\"methodAnnotations == null\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> start = converterFactories.indexOf(skipPast) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class=\"line\">    Converter.Factory factory = converterFactories.get(i);</span><br><span class=\"line\">    Converter&lt;?, RequestBody&gt; converter =</span><br><span class=\"line\">        factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (Converter&lt;T, RequestBody&gt;) converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> ...build string</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(builder.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  其实很简单，就是返回<code>factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);</code>，就是å·¥厂造一个<code>Converter</code><br>  这个工厂造的<code>Converter</code>怎么造，框架是不管的，总之你按照我给你定义的标准造一个来就是了。感兴趣就去看看<code>&#39;retrofit-converters&#39;</code>这个包里是怎么造的，也很简单<br>  然后通过<code>Converter</code>的<code>convert()</code>方法就把你想要的类型数据返回给你了，这个<code>convert()</code>方法也是你在实现<code>Converter</code>要自己实现的，当然源码里提供了一些实现，你自己去看。</p>\n<p>  整个流程就是这样的。希望对你阅读源代码有帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>Retrofit最简单的用法就是定义一个接口，创建<code>Retrofit</code>对象，调用<code>create()</code>方法得到一个<code>service</code>,<br>然后自己根据<code>service</code>中的方法去做同步或者异步的请求，拿到数据对象，十分简单快速，简单代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHub</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@GET</span>(<span class=\"string\">\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\"</span>)</span><br><span class=\"line\">   Call&lt;List&lt;Integer&gt;&gt; contributors(<span class=\"meta\">@Path</span>(<span class=\"string\">\"owner\"</span>) String owner,<span class=\"meta\">@Path</span>(<span class=\"string\">\"repo\"</span>) String repo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.创建</span><br><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(<span class=\"string\">\"xxx\"</span>).build();</span><br><span class=\"line\">.代理</span><br><span class=\"line\">GitHub gitHub = retrofit.create(GitHub.class);</span><br><span class=\"line\">Call&lt;List&lt;Integer&gt;&gt; call = gitHub.contributors(<span class=\"string\">\"xx\"</span>, <span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\">.执行</span><br><span class=\"line\">call.enqueue(<span class=\"keyword\">new</span> Callback&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;List&lt;Integer&gt;&gt; call, Response&lt;List&lt;Integer&gt;&gt; response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;List&lt;Integer&gt;&gt; call, Throwable t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>那这么简单的过程，刚开始看的时候觉得有点懵é¼呀，怎么他就帮你完成了请求，你明明什么都没有做，下面我们按照它的流程慢慢来解析一下整个过程。<br>我们要用<code>Retrofit</code>,首先自然是要创建它,也就是这行代码<code>Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;xxx&quot;).build();</code>.<br>这里创建<code>Retrofit</code>是通过它的一个内部类<code>Builder</code>来创建的，也就是创建者模式，这个模式很简单，不知道的自行百度，谷歌。<br>好，我们来看看这个<code>builder</code>做了什么,除了初始化有个<code>Platform.get()</code>,直接看最后的<code>build()</code>,其余的方法都是设置参数，主要就是这个<code>build()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(Platform.get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Retrofit <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>.</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (baseUrl == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Base URL required.\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">2</span>.</span><br><span class=\"line\">      okhttp3.Call.Factory callFactory = <span class=\"keyword\">this</span>.callFactory;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callFactory = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">3</span>.</span><br><span class=\"line\">      Executor callbackExecutor = <span class=\"keyword\">this</span>.callbackExecutor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callbackExecutor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"number\">4</span>.</span><br><span class=\"line\">      <span class=\"comment\">// Make a defensive copy of the adapters and add the default Call adapter.</span></span><br><span class=\"line\">      List&lt;CallAdapter.Factory&gt; adapterFactories = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.adapterFactories);</span><br><span class=\"line\">      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</span><br><span class=\"line\"> <span class=\"number\">5</span>.</span><br><span class=\"line\">      <span class=\"comment\">// Make a defensive copy of the converters.</span></span><br><span class=\"line\">      List&lt;Converter.Factory&gt; converterFactories = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.converterFactories);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,</span><br><span class=\"line\">          callbackExecutor, validateEagerly);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>首先一初始化，就做了一件事情，是啥<code>Platform.get()</code>，<code>Platform</code>是啥？直译过来就是平台啊，平台是啥？为啥要有平台？看下面这个代码<code>get()</code>其实<br>就是一个就是调用<code>findPlatform()</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Platform PLATFORM = findPlatform();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Platform <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> PLATFORM;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Platform <span class=\"title\">findPlatform</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class.forName(<span class=\"string\">\"android.os.Build\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Android();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class.forName(<span class=\"string\">\"java.util.Optional\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Java8();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Platform();</span><br></pre></td></tr></table></figure>\n<p>  有<code>Android</code>和<code>Java8</code>两种平台，<code>Android</code>我们还是能理解的，为啥还有个<code>Java8</code>，不要问我，我也不知道啊，<code>Retrofit</code>的作者炒鸡暖男，关心全世界各种码农，<br>  我是个写android代码的我们就看<code>Android</code>平台就好了<br>  下面我们来看一下<code>build()</code>这个方法：</p>\n<ul>\n<li>第一步很简单，没有<code>baseUrl</code>抛出异常，最基本的没有，事情没法干是吧。</li>\n<li>第二步，如果没有给他设置<code>callFactory</code>，那默认给他一个<code>callFactory</code>，默认就是新创建一个<code>OkHttpClient</code>，这里可能我们会有自己做过一些<br>处理的<code>OkHttpClient</code>,比如加了<code>Interceptor</code>啊之类的，设置进来就好了，就不会用默认的。<br>有人可能会问啥是<code>callFactory</code>啊 ？<code>callFactory</code>嘛，就是call的factory嘛，call是啥，就是请求，factory是啥，就是工厂，<code>callFactory</code>就是创建请求的<br>工厂，<code>OkHttpClient</code>就是一个很牛逼的创建请求的工厂，不在本文讨论范围内，就不多言了。</li>\n<li>第三步，设置<code>callbackExecutor</code>,又来一个，这<code>callbackExecutor</code>又是啥呢？<code>callback</code>就是回调嘛，啥回调，就是网络请求返回回来数据的回调，<code>executor</code>呢，就是执行者<br>，合起来就是回调的执行者，意思网络成功了之后交给他它了。如果你没有设置它就自己整一个默认的回调嘛，不能没有。但是这里它要搞事情了，它返回了一个啥？<br><code>platform.defaultCallbackExecutor();</code>来，我们看一下<code>android</code>下它返回的是啥：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Android</span> <span class=\"keyword\">extends</span> <span class=\"title\">Platform</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">defaultCallbackExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainThreadExecutor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> CallAdapter.<span class=\"function\">Factory <span class=\"title\">defaultCallAdapterFactory</span><span class=\"params\">(Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallAdapterFactory(callbackExecutor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainThreadExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler handler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">        handler.post(r);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>是啥？<code>MainThreadExecutor()</code>啊，啥意思就是主线程啊，下面写的明明白白的<code>Looper.getMainLooper()</code>再把要执行的<code>Runnable</code>post到主线程上执行<br>因为它是默认的嘛，可能就说大多数人都是得到数据更新UI啊啥的，所以就默认在主线程上执行回调了。我就不想拿到数据在主线程座做咋办，我拿到数据我就想更新数据库，<br>我想在IO线程上搞事情，那就自己写个<code>callbackExecutor</code>，自己在IO线程上做就好了，人家提供了一个方法<code>callbackExecutor(Executor executor)</code>给你，你自己设置进去就好了</p>\n<ul>\n<li>第四步是啥？看代码说话，那就是设置<code>callAdapterFactory</code>啊 。<code>callAdapterFactory</code>又是什么鬼啊，和上面一样啊，拆分一下呀。<code>CallAdapter</code>啥意思，就是请求的<br>适配器，请求的适配器是什么鬼啊。来来来我告诉你，你看看源码里面根目录是不是有一个包名字叫做<code>&#39;retrofit-adapter&#39;</code>,这个包就是实现了一些列的<code>CallAdapter</code><br>意思就是你想将返回的数据用什么东西包装起来，比如你用<code>Rxjava</code>的话想返回<code>Observable</code>，或者高兴，想用<code>Java8</code>的<code>CompletableFuture</code>，这些都由你呀。<br>但是这些都实现了一个叫<code>CallAdapter</code>的接口。我们来简单看看这个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CallAdapter</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Type <span class=\"title\">responseType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">T <span class=\"title\">adapt</span><span class=\"params\">(Call&lt;R&gt; call)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Type <span class=\"title\">getParameterUpperBound</span><span class=\"params\">(<span class=\"keyword\">int</span> index, ParameterizedType type)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Utils.getParameterUpperBound(index, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getRawType(Type type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Utils.getRawType(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实接口里面就是两个方法还有一个静态的工厂类。<code>responseType()</code>这个方法决定请求回来之后返回的是什么类型的数据。比如在示例用法中我们的<code>List&lt;Integer&gt;</code><br><code>adapt()</code>这个方法是干嘛的呢？就是适配嘛，就是怎样把返回回来的数据通过这个方法包装成你想要的对象。<br>这里看到这个名字<code>adapter</code>你想到了啥，其实就是传说中的适配器模式啊，就是我给你定义一个接口放这里，我在框架里的逻辑就用这个接口来做就好了，至于你想要怎样的实现，<br>想用框架供给你的一些实现比如<code>Rxjava</code>或者<code>Java8</code>的<code>CallAdapter</code>,或者是你自己心情好想用自己的实现一个其他的<code>CallAdapter</code>，你自己决定就好了。这就是传说中的啥？？扩展性好啊。<br>继续看<code>build()</code><br>这个方法，它调用的是<code>adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));·\n再回来</code>Platform<code>看</code>defaultCallAdapterFactory()<code>返回的是一个</code>ExecutorCallAdapterFactory<code>。这个类他么的又来干嘛，当然是搞事情。\n进去瞅一眼，发现了什么？它当然是继承</code>CallAdapter.Factory<code>了，这个不说了，看几句代码来，看它的</code>get()<code>方法，看看这个工厂是怎么造</code>CallAdapter`的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getRawType(returnType) != Call.class) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Type responseType = Utils.getCallResponseType(returnType);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">responseType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> responseType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Call&lt;Object&gt; <span class=\"title\">adapt</span><span class=\"params\">(Call&lt;Object&gt; call)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  返回了一个简单新创建的实现<code>CallAdapter</code>ç匿名类。注意看看这里的<code>adapt()</code>方法，前面讲了就是用它来实现到底返回什么包装对象的逻辑。这里返回的是一个<br>  <code>ExecutorCallbackCall</code>,<code>ExecutorCallbackCall</code>是这<code>ExecutorCallAdapterFactory</code>里面的一个内部类.来看看它的代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutorCallbackCall</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Call</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Executor callbackExecutor;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Call&lt;T&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbackExecutor = callbackExecutor;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(<span class=\"keyword\">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"callback == null\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    delegate.enqueue(<span class=\"keyword\">new</span> Callback&lt;T&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;T&gt; call, <span class=\"keyword\">final</span> Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class=\"line\">        callbackExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (delegate.isCanceled()) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.</span></span><br><span class=\"line\">              callback.onFailure(ExecutorCallbackCall.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Canceled\"</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              callback.onResponse(ExecutorCallbackCall.<span class=\"keyword\">this</span>, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;T&gt; call, <span class=\"keyword\">final</span> Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        callbackExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            callback.onFailure(ExecutorCallbackCall.<span class=\"keyword\">this</span>, t);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExecuted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.isExecuted();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response&lt;T&gt; <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.execute();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    delegate.cancel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCanceled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.isCanceled();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"CloneDoesntCallSuperClone\"</span>) <span class=\"comment\">// Performing deep clone.</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Call&lt;T&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExecutorCallbackCall&lt;&gt;(callbackExecutor, delegate.clone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate.request();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  它实现了<code>Call</code>这个接口，<code>Call</code>我们前面说了，是啥，就是一个请求嘛，然而我们看这里并没有实际做请求而是用了一个静态代理，<br>  通过代理类的实现来实现call请求，而在这里面做了一些其他的逻辑比如<code>cancel</code>的逻辑，而实际上做请求的还是交个了<code>delegate -&gt; OkHttpCall</code>.</p>\n<ul>\n<li>第五步，接着看上面的<code>build()</code>的代码，不要着急，第一段代码还没讲完呢。第五步是什么？<code>List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;(this.converterFactories);</code><br>这一步就是关于<code>Converter</code>，顾名思义，它就是一个转换器，什么转换器，数据的转换器，我们从后端获取到的数据，一般都是一些序列化的数据，例如<code>json</code>,<code>xml</code>,<code>protobuf</code>之类的<br>而æ们前端用到的需要的是一个对象，我们就需要吧这些序列化的数据转换成我们想要的能直接用的用起来爽的对象，这时候就需要现在登场的这个东西。现在<code>json</code>用的<br>比较多，我们平时都会用什么<code>gson</code>,<code>jackson</code>或者其他的三方库来转化它，你觉得哪个用起来高兴就可以用什么写一个<code>Converter</code>,然后用<code>Builder</code>中的<code>addConverterFactory</code><br>就可以用你想要的了，而且你都不用写，因为官方提供了好多种<code>Converter</code>的，在根目录下的<code>&#39;retrofit-converters&#39;</code>这个包下面，你只需要用就好了，那我们这里如果没有设置过<code>converterFactories</code><br>咋办？咋办？没设置，后面找不到会<strong>报错的</strong>。<br>这里的<code>Response</code>是<code>Retrofit</code>对<code>OkHttp</code>的<code>ResponseBody</code>封装了一些逻辑的类，源码就不贴了，自己点进去看看。<br>这里我们顺便看看<code>Converter</code>这个接口：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">T <span class=\"title\">convert</span><span class=\"params\">(F value)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class=\"line\">        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;?, String&gt; stringConverter(Type type, Annotation[] annotations,</span><br><span class=\"line\">        Retrofit retrofit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接口就一个方法，就是转换，然后里面还有一个静态的工厂类我们看到里面有3个方法，其实很好理解。我们需要把返回来的<code>ResponseBody</code>里的数据转换<br>成我们想要的东西，我们也会想要把我们<code>RequestBody</code>程序里的东西转换成后端想要的东西.就是这个逻辑拉，这个工厂类就是给我们提供各种转换器，我们<br>只需要根据我们自己的需求来实现或者使用对应的就好了。这又是啥，还是和上面一样啊ï¼给你定义一个接口，接口是什么，就是标准，给你一个标准<br>你实现这个标准就行，我用我这套标准来实现我内部的逻辑，至于你怎么实现，想用啥方法实现，玩成什么花样都可以，我不管，只要你遵循了标准，就可以。这样<br>扩展性就好呀。这就是人家大神牛逼之处啊，代码写到高处就是写标准啊。<br>讲到这里，我们示例用法中的第一句<code>Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;xxx&quot;).build();</code>总算讲完了。中间这么多逻辑，这么<br>多心血，你看，你一句话就搞定了，是不是该学习学习。</p>\n<h3 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h3><p>build好了之后，就是需要的材料都搞齐了，要工厂有工厂要材料有材料，下面我们来讲讲这第二句，第二句，那厉害了。其实他就是啥，利用你定义的一个充满各种注解的接口<code>interface GitHub()</code>来简单粗暴的做了一个动作，<br>那就是<code>create()</code>。这个动作看似简单，实则过于粗暴啊，进去ç看代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>.</span><br><span class=\"line\">    Utils.validateServiceInterface(service);</span><br><span class=\"line\">  <span class=\"number\">2</span>.</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (validateEagerly) &#123;</span><br><span class=\"line\">      eagerlyValidateMethods(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Platform platform = Platform.get();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span></span><br><span class=\"line\"><span class=\"function\">              <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"number\">3</span>.</span><br><span class=\"line\">            <span class=\"comment\">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"number\">4</span>.</span><br><span class=\"line\">            ServiceMethod&lt;Object, Object&gt; serviceMethod =</span><br><span class=\"line\">                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class=\"line\">            <span class=\"number\">5</span>.</span><br><span class=\"line\">            OkHttpCall&lt;Object&gt; okHttpCall = <span class=\"keyword\">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class=\"line\">            <span class=\"number\">6</span>.</span><br><span class=\"line\">            <span class=\"keyword\">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里你首先要了解的知识是泛型，反射，动态代理。如果不懂，请自行google.好吧，我说下动态代理，动态代理就是动态的代理，就是只要你实现了一个借口，<code>Proxy</code>就可以根据这个接口来对你<br>实现代理，也就是说<code>Proxy</code>只能代理实现了接口的类。这也就是为什么我们要写一个<code>Interface</code>来作为<code>Service</code>,然后在里面写一些注解之类的。如果接触过<code>JAVAEE</code>的话，<br><code>Spring</code>里的AOP动态代理是采用<code>cglib</code>来修改字节码实现的动态代理，而且不需要实现接口，感兴趣的朋友可以看一下。回到这里，就是通过<code>Proxy</code>这个类利用反射，对你写的接口进行解析<br>获取到你申明的方法，然后对你的方法实现框架想要实现的逻辑，来完成所谓的ä»£理。<br>我们来看代码。</p>\n<ul>\n<li><p>第一步，就是检验你定义的<code>service</code>接口是不是正确。简单看下代码,首先如果不是接口会抛出异常，还有为了避免出现bug,和保证API都是统一的标准，不允许定义的<code>Service</code>接口继承别的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">validateServiceInterface</span><span class=\"params\">(Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!service.isInterface()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"API declarations must be interfaces.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Prevent API interfaces from extending other interfaces. This not only avoids a bug in</span></span><br><span class=\"line\">    <span class=\"comment\">// Android (http://b.android.com/58753) but it forces composition of API declarations which is</span></span><br><span class=\"line\">    <span class=\"comment\">// the recommended pattern.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (service.getInterfaces().length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"API interfaces must not extend other interfaces.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二步，如果你在前面<code>creat()</code>的时候，设置过<code>validateEagerly</code>为<code>true</code>的话，它会在这一步将所有的你<code>Service</code>中声明的<code>Method</code>在这里都å始化了,并且缓存起来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">eagerlyValidateMethods</span><span class=\"params\">(Class&lt;?&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    Platform platform = Platform.get();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Method method : service.getDeclaredMethods()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">        loadServiceMethod(method);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) &#123;</span><br><span class=\"line\">    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (serviceMethodCache) &#123;</span><br><span class=\"line\">      result = serviceMethodCache.get(method);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> ServiceMethod.Builder&lt;&gt;(<span class=\"keyword\">this</span>, method).build();</span><br><span class=\"line\">        serviceMethodCache.put(method, result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里在解析你用<code>annotations</code>标注的<code>Method</code>时也一样用到了<code>Builder</code>这种模式，通过<code>ServiceMethod</code>这个类来解析你的标注，将标准转化为实际的逻辑。<br>这里面的代码比较多，我就不再贴了，其实里面的逻辑比较单一，但是比较复杂。主要就是根据不同的标注，来生成对应的对象，你用着有多简单就有框架来给你承受多复杂。只看一下他的<code>Constructor</code><br>最后会得到着一些东西。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceMethod(Builder&lt;R, T&gt; builder) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.callFactory = builder.retrofit.callFactory();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.callAdapter = builder.callAdapter;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.baseUrl = builder.retrofit.baseUrl();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.responseConverter = builder.responseConverter;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpMethod = builder.httpMethod;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.relativeUrl = builder.relativeUrl;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.headers = builder.headers;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contentType = builder.contentType;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.hasBody = builder.hasBody;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isFormEncoded = builder.isFormEncoded;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isMultipart = builder.isMultipart;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parameterHandlers = builder.parameterHandlers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三步，这时候就进入到每个方法的代理实现里来了。实际上这里面是已经进入了上面例子中的第三句了，因为是为每一个其中的方法实ç°代理<code>Call&lt;List&lt;Integer&gt;&gt; call = gitHub.contributors(&quot;xx&quot;, &quot;xx&quot;);</code>的流程了。<br>如果是<code>Object</code>声明的方法，直接执行原方法，然后<code>platform.isDefaultMethod(method)</code>在<code>Android</code>平台直接返回<code>false</code>，所以这里直接忽略。</p>\n</li>\n<li>第四步，这里如果第二步没有build过这个方法，或者缓存里没有会<code>build</code>这个方法，缓存里有的话直接取过来。</li>\n<li>第五步，根据<code>serviceMethod</code>初始化<code>OkHttpCall</code>,真正执行请求是交给这个类来执行的。</li>\n<li>第六步，根据<code>OkHttpCall</code>最后返回<code>CallAdapter</code>适配后的你想要的类型.到这里就通过代理得到了一个所有参数，<code>headers</code>或者其他都准备好了的，并且也通过<code>CallAdapter</code>实现了返回数据包装的一个完整的数据类型.</li>\n</ul>\n<p>讲到这里，准备工作都已经做齐了，就等着最后执行了。这里的<code>Call</code>是根据你设置的<code>CallAdapter</code>来返回的，比如如果你熟悉<code>Rxjava</code>，那结合<code>Rxjava</code>，这里也可以<br>返回一个<code>Observable</code>.当然你å¨定义这个<code>Service</code>接口的时候也应该声明为这个返回类型。就算是<code>Call</code> ,也不是返回<code>OkHttpCall</code>,前面讲到了<code>ExecutorCallbackCall</code>来静态代理了<br><code>OkHttpCall</code>，实际上这里返回的是<code>ExecutorCallbackCall</code>.</p>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>如果是<code>ExecutorCallbackCall</code>的话，提供了同步的<code>excute</code>和异步的<code>enqueue</code>来执行这个请求，并且提供一个<code>Callback</code>回调的接口来处理调用成功<br>或者失败。调用之后是如何拿到数据之后，被<code>Converter</code>转化，被<code>CallAdapter</code>包装然后返回给我们的呢？<br>来我们慢慢分析。前面我们提到了，其实所有的请求执行，实际上都是<code>OkHttpCall</code>这个类在操作。<code>OkHttpCall</code>实现了<code>Call</code>接口，就是一些请求的常用逻辑，同步异步cancel等等，<br>不管是同步还是异步，最后都是拿到返回的<code>Response</code>转换成我们想要的数据。我们挑一个<code>OkHttpCall</code>中同步的方法看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response&lt;T&gt; <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">     okhttp3.Call call;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">       ... 中间逻辑很简单就省略了</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> parseResponse(call.execute());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Response&lt;T&gt; <span class=\"title\">parseResponse</span><span class=\"params\">(okhttp3.Response rawResponse)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">   ResponseBody rawBody = rawResponse.body();</span><br><span class=\"line\">   rawResponse = rawResponse.newBuilder()</span><br><span class=\"line\">       .body(<span class=\"keyword\">new</span> NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))</span><br><span class=\"line\">       .build();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> code = rawResponse.code();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (code &lt; <span class=\"number\">200</span> || code &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Buffer the entire body to avoid future I/O.</span></span><br><span class=\"line\">       ResponseBody bufferedBody = Utils.buffer(rawBody);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Response.error(bufferedBody, rawResponse);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">       rawBody.close();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (code == <span class=\"number\">204</span> || code == <span class=\"number\">205</span>) &#123;</span><br><span class=\"line\">     rawBody.close();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Response.success(<span class=\"keyword\">null</span>, rawResponse);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   ExceptionCatchingRequestBody catchingBody = <span class=\"keyword\">new</span> ExceptionCatchingRequestBody(rawBody);</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     T body = serviceMethod.toResponse(catchingBody);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Response.success(body, rawResponse);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class=\"line\">     <span class=\"comment\">// a runtime exception.</span></span><br><span class=\"line\">     catchingBody.throwIfCaught();</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>首先我们就来看<code>Retrofit</code>在执行后是怎么讲<code>response</code>转换成我们想要的数据的。<code>excute()</code>执行后中间有点失败取消的逻辑，最后就是直接把成功后的<code>response</code>交给<br><code>parseResponse()</code>这个方法，这里先转化为一个没有<code>body</code>数据的<code>response</code>来做状态判断，如果需要转换数据，把原来的<code>ResponseBody</code>转换为一个静态代理的<code>ExceptionCatchingRequestBody</code><br>交给<code>serviceMethod.toResponse(catchingBody)</code>，主要是为了做一些异常处理。顺着这个流程我们进<code>ServiceMethod</code>来看看<code>toResponse（）</code>这个方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Builds a method return value from an HTTP response body. */</span><br><span class=\"line\"> public ServiceMethod build() &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">    responseConverter = createResponseConverter();</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  R toResponse(ResponseBody body) throws IOException &#123;</span><br><span class=\"line\">    return responseConverter.convert(body);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">private Converter&lt;ResponseBody, T&gt; createResponseConverter() &#123;</span><br><span class=\"line\">      Annotation[] annotations = method.getAnnotations();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        return retrofit.responseBodyConverter(responseType, annotations);</span><br><span class=\"line\">      &#125; catch (RuntimeException e) &#123; // Wide exception range because factories are user code.</span><br><span class=\"line\">        throw methodError(e, &quot;Unable to create converter for %s&quot;, responseType);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单就是交给了<code>Converter</code>来做转换。<code>Converter</code>看起来是不是很眼熟。前面我们好像设置了啊。最后又回到了<code>Retrofit</code>这个类，来看看<br><code>responseBodyConverter（）</code>这个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Converter&lt;T, RequestBody&gt; <span class=\"title\">requestBodyConverter</span><span class=\"params\">(Type type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Annotation[] parameterAnnotations, Annotation[] methodAnnotations)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nextRequestBodyConverter(<span class=\"keyword\">null</span>, type, parameterAnnotations, methodAnnotations);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Converter&lt;T, RequestBody&gt; <span class=\"title\">nextRequestBodyConverter</span><span class=\"params\">(Converter.Factory skipPast,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations)</span> </span>&#123;</span><br><span class=\"line\">  checkNotNull(type, <span class=\"string\">\"type == null\"</span>);</span><br><span class=\"line\">  checkNotNull(parameterAnnotations, <span class=\"string\">\"parameterAnnotations == null\"</span>);</span><br><span class=\"line\">  checkNotNull(methodAnnotations, <span class=\"string\">\"methodAnnotations == null\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> start = converterFactories.indexOf(skipPast) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class=\"line\">    Converter.Factory factory = converterFactories.get(i);</span><br><span class=\"line\">    Converter&lt;?, RequestBody&gt; converter =</span><br><span class=\"line\">        factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (Converter&lt;T, RequestBody&gt;) converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> ...build string</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(builder.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  其实很简单，就是返回<code>factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);</code>，就是å·¥厂造一个<code>Converter</code><br>  这个工厂造的<code>Converter</code>怎么造，框架是不管的，总之你按照我给你定义的标准造一个来就是了。感兴趣就去看看<code>&#39;retrofit-converters&#39;</code>这个包里是怎么造的，也很简单<br>  然后通过<code>Converter</code>的<code>convert()</code>方法就把你想要的类型数据返回给你了，这个<code>convert()</code>方法也是你在实现<code>Converter</code>要自己实现的，当然源码里提供了一些实现，你自己去看。</p>\n<p>  整个流程就是这样的。希望对你阅读源代码有帮助。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cji5c6jf20000oa50nkmfkhrw","tag_id":"cji5c6jfd0002oa50yujz6rb4","_id":"cji5c6jfk0003oa50f67nmvce"},{"post_id":"cji5c6jhs0004oa501nwgmpmg","tag_id":"cji5c6jhu0005oa50xbc2suk2","_id":"cji5c6jhu0006oa50g5kc8j3i"},{"post_id":"cji5c6jl80007oa50hx107i5h","tag_id":"cji5c6jla0008oa50zfhh7g3o","_id":"cji5c6jla0009oa502v3c0vbv"}],"Tag":[{"name":"linux","_id":"cji5c6jfd0002oa50yujz6rb4"},{"name":"其他","_id":"cji5c6jhu0005oa50xbc2suk2"},{"name":"android","_id":"cji5c6jla0008oa50zfhh7g3o"}]}}